(()=>{"use strict";const e=(e,r)=>{let t=!1;if(JSON.stringify(e)===JSON.stringify(r)&&(t=!0),!e)return t;if(!r)return t;for(let s=0;s<e.length;s++){const n=e[s];JSON.stringify(n)===JSON.stringify(r)&&(t=!0)}return t},r=(e,r,t)=>{let s=0;"cpu"===t&&(s=1);const n=document.getElementsByClassName(e)[s];n&&(n.textContent=!1===r?"â€¢":"X")},t=(()=>{const r=(e,r,t)=>{let s=r;const n=e;return{isSunk:()=>n===s,hit:()=>s++,currentHits:()=>s,currentCords:t,shipLength:n}};return{Ship:r,Gameboard:()=>{const t=[],s=[];return{receiveAttack:(r,n)=>{const c=Object.entries(n.coordinates);t.push(r);for(let t=0;t<c.length;t++){let i=!1;const a=c[t][1],o=c[t][0];if(e(a,r)&&(i=!0,s.push(r),"carrier"===o&&n.carrier.hit(),"battleShip"===o&&n.battleShip.hit(),"battleShip1"===o&&n.battleShip1.hit(),"cruiser"===o&&n.cruiser.hit(),"cruiser1"===o&&n.cruiser1.hit(),"cruiser2"===o&&n.cruiser2.hit(),"destroyer"===o&&n.destroyer.hit(),"destroyer1"===o&&n.destroyer1.hit(),"destroyer2"===o&&n.destroyer2.hit(),"destroyer3"===o&&n.destroyer3.hit()),!0===i)break}},deployShips:(e,t,s,n,c,i,a,o,l,d)=>{const u={carrier:e,battleShip:t,battleShip1:s,cruiser:n,cruiser1:c,cruiser2:i,destroyer:a,destroyer1:o,destroyer2:l,destroyer3:d};return{carrier:r(4,0,u.carrier),battleShip:r(3,0,u.battleShip),battleShip1:r(3,0,u.battleShip1),cruiser:r(2,0,u.cruiser),cruiser1:r(2,0,u.cruiser1),cruiser2:r(2,0,u.cruiser2),destroyer:r(1,0,u.destroyer),destroyer1:r(1,0,u.destroyer1),destroyer2:r(1,0,u.destroyer2),destroyer3:r(1,0,u.destroyer3),coordinates:u}},receivedAttacks:t,successAttacks:s,checkSunk:e=>{return!((r=e).carrier.currentCords&&!r.carrier.isSunk()||r.battleShip.currentCords&&!r.battleShip.isSunk()||r.battleShip1.currentCords&&!r.battleShip1.isSunk()||r.cruiser.currentCords&&!r.cruiser.isSunk()||r.cruiser1.currentCords&&!r.cruiser1.isSunk()||r.cruiser2.currentCords&&!r.cruiser2.isSunk()||r.destroyer.currentCords&&!r.destroyer.isSunk()||r.destroyer1.currentCords&&!r.destroyer1.isSunk()||r.destroyer2.currentCords&&!r.destroyer2.isSunk()||r.destroyer3.currentCords&&!r.destroyer3.isSunk());var r}}}}})(),s=(e,r)=>{const s=e,n=r,c=t.Gameboard(),i=c.deployShips(...r);return{playerName:s,playerCoords:n,playerBoard:c,playerShips:i,receiveAttack:e=>c.receiveAttack(e,i)}},n=(s,n)=>{const c=s,i=n,a=t.Gameboard(),o=a.deployShips(...n),l=[],d=t=>{const s=e=>Math.floor(Math.random()*e),n=[s(9),s(9)];if(e(l,t))return d();if(e(l,n))return d();if(!t)return l.push(t),c.receiveAttack(t);c.receiveAttack(n);const i=c.playerBoard.successAttacks;return console.log(n),console.log(i),e(i,n)?r(n,!0,"player"):r(n,!1,"player")};return{attackPlayer:d,cpuBoard:a,cpuShips:o,cpuCoords:i,receiveAttack:e=>a.receiveAttack(e,o)}},c=(e,r,t)=>{const c=s(e,r);return{Player:c,cpuPlayer:n(c,t)}},i=(()=>{const t=(t,s)=>{const n=s.Player.playerShips.coordinates,c=s.cpuPlayer.cpuShips.coordinates,i=e=>s.Player.receiveAttack(e),a=e=>s.cpuPlayer.receiveAttack(e),o=(r,t,s)=>{let n=!1;if(e(Object.values(r),t))return s(t),n=!0,!0;for(let c=0;c<r.length;c++){const i=r[c];if(e(i,t)){s(t),n=!0;break}}return n},l=(e,r)=>(r(e),!1),d=e=>{const t=e.target.parentElement.className,s=e.target.className,d=(e=>{const r=[],t=e.slice(0,1),s=e.slice(2,3);return r.push(Number(t)),r.push(Number(s)),r})(s);if("grid-1"===t){const e=Object.values(n).filter((e=>void 0!==e));!0===o(e,d,i)?r(s,!0,"player"):(l(d,i),r(s,!1,"player"))}if("grid-2"===t){const e=Object.values(c).filter((e=>void 0!==e));!0===o(e,d,a)?r(s,!0,"cpu"):(l(d,a),r(s,!1,"cpu"))}};for(let e=0;e<t.length;e++)t[e].addEventListener("click",(e=>{d(e)}),{once:!0});return{visualIndicators:r}};return{startGame:(e,r,s,n)=>{const i=c("example",s,n);return"shown-grid"!==e.className&&t(e.childNodes,i),"shown-grid"!==r.className&&t(r.childNodes,i),{currentGame:i,gridContainer1:e,gridContainer2:r}},displayGrid:(e,r)=>{(t=>{const s=t=>{if(10!==t){for(let s=0;s<10;s++){const n=document.createElement("div");n.className=`${t},${s}`;const c=document.createElement("div");c.className=`${t},${s}`,e&&e.appendChild(n),r&&r.appendChild(c)}s(t+1)}};s(0)})()},genDOMElements:()=>{const e=(e,r)=>{const t=document.getElementsByClassName(e)[r-1];t&&(t.style.border="1px solid green")};return{genGrid:(r,t)=>{const s=document.createElement("section");s.className="grids-container";const n=document.querySelector("main");n&&n.appendChild(s);const c=document.createElement("h3");c.textContent=`Player's ${r} Grid`,s.appendChild(c);const a=document.createElement("div");return a.className=`grid-${r}`,s.appendChild(a),1===r?i.displayGrid(a,null):i.displayGrid(null,a),t&&(a.className="shown-grid",((r,t)=>{const s=(e=>{const r=[];for(let t=0;t<e.length;t++){const s=e[t];"object"==typeof s[0]?r.push(...s):r.push(s)}return r})(r);for(let r=0;r<s.length;r++)e(`${(n=s[r]).slice(0,1)},${n.slice(1,2)}`,t);var n})(t,r)),a},deleteElements:()=>{const e=document.getElementsByClassName("grids-container")[0];e&&e.remove()},genStartButton:()=>{const e=document.createElement("button");e.className="start-button",e.textContent="Start Game";const r=document.getElementsByClassName("grids-container")[0];r&&r.appendChild(e)}}},endGame:e=>{const r=document.getElementsByClassName("grid-1")[0],t=document.getElementsByClassName("grid-2")[0];r&&r.replaceWith(r.cloneNode(!0)),t&&t.replaceWith(t.cloneNode(!0))}}})();(()=>{const e=[[[0,1],[0,2],[0,3],[0,4]],[[2,1],[3,1],[4,1]],[[0,6],[0,7],[0,8]],[[3,3],[3,4]],[[6,3],[6,2]],[[6,8],[6,9]],[7,5],[9,2],[9,9],[8,7]],r=i.genDOMElements(),t=()=>{r.deleteElements();const t=i.startGame(r.genGrid(1,e),r.genGrid(2),e,e),s=t.currentGame.Player,n=t.currentGame.cpuPlayer,c=((e,r)=>{const t=e.playerCoords,s=e.playerShips,n=r.cpuShips;let c=0;return{turnsLogic:()=>{let a=!1;return r.cpuBoard.receivedAttacks.length===c+1&&(c++,r.attackPlayer(t)),e.playerBoard.checkSunk(s)&&(i.endGame("player1"),a=!0),r.cpuBoard.checkSunk(n)&&(i.endGame("player2"),a=!0),a}}})(s,n);return((e,r)=>{for(let t=0;t<r.childNodes.length;t++)r.childNodes[t].addEventListener("click",e.turnsLogic)})(c,t.gridContainer2),{playerObj:s,cpuObj:n,currentTurn:c}};return{singlePlayer:t,setupDOM:()=>{r.genGrid(1,e),r.genStartButton();const s=document.getElementsByClassName("start-button")[0];s&&s.addEventListener("click",t)}}})().setupDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,