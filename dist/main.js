(()=>{"use strict";const e=(e,r)=>{let t=!1;if(JSON.stringify(e)===JSON.stringify(r)&&(t=!0),void 0===e)return t;if(void 0===r)return t;for(let s=0;s<e.length;s++){const n=e[s];JSON.stringify(n)===JSON.stringify(r)&&(t=!0)}return t},r=(()=>{const r=(e,r,t)=>{let s=r;const n=e;return{isSunk:()=>n===s,hit:()=>s++,currentHits:()=>s,currentCords:t,shipLength:n}};return{Ship:r,Gameboard:()=>{const t=[],s=[];return{receiveAttack:(r,n)=>{const c=Object.entries(n.coordinates);t.push(r);for(let t=0;t<c.length;t++){let i=!1;const o=c[t][1],a=c[t][0];if(e(o,r)&&(i=!0,s.push(r),"carrier"===a&&n.carrier.hit(),"battleShip"===a&&n.battleShip.hit(),"battleShip1"===a&&n.battleShip1.hit(),"cruiser"===a&&n.cruiser.hit(),"cruiser1"===a&&n.cruiser1.hit(),"cruiser2"===a&&n.cruiser2.hit(),"destroyer"===a&&n.destroyer.hit(),"destroyer1"===a&&n.destroyer1.hit(),"destroyer2"===a&&n.destroyer2.hit(),"destroyer3"===a&&n.destroyer3.hit()),!0===i)break}},deployShips:(e,t,s,n,c,i,o,a,d,l)=>{const u={carrier:e,battleShip:t,battleShip1:s,cruiser:n,cruiser1:c,cruiser2:i,destroyer:o,destroyer1:a,destroyer2:d,destroyer3:l};return{carrier:r(4,0,u.carrier),battleShip:r(3,0,u.battleShip),battleShip1:r(3,0,u.battleShip1),cruiser:r(2,0,u.cruiser),cruiser1:r(2,0,u.cruiser1),cruiser2:r(2,0,u.cruiser2),destroyer:r(1,0,u.destroyer),destroyer1:r(1,0,u.destroyer1),destroyer2:r(1,0,u.destroyer2),destroyer3:r(1,0,u.destroyer3),coordinates:u}},receivedAttacks:t,successAttacks:s,checkSunk:e=>{return!((r=e).carrier.currentCords&&!r.carrier.isSunk()||r.battleShip.currentCords&&!r.battleShip.isSunk()||r.battleShip1.currentCords&&!r.battleShip1.isSunk()||r.cruiser.currentCords&&!r.cruiser.isSunk()||r.cruiser1.currentCords&&!r.cruiser1.isSunk()||r.cruiser2.currentCords&&!r.cruiser2.isSunk()||r.destroyer.currentCords&&!r.destroyer.isSunk()||r.destroyer1.currentCords&&!r.destroyer1.isSunk()||r.destroyer2.currentCords&&!r.destroyer2.isSunk()||r.destroyer3.currentCords&&!r.destroyer3.isSunk());var r}}}}})(),t=(e,t)=>{const s=e,n=r.Gameboard(),c=n.deployShips(...t);return{playerName:s,playerBoard:n,playerShips:c,receiveAttack:e=>n.receiveAttack(e,c)}},s=(t,s)=>{const n=t,c=r.Gameboard(),i=c.deployShips(...s),o=[],a=r=>{const t=e=>Math.floor(Math.random()*e),s=[t(9),t(9)];return e(o,r)||e(o,s)?a():r?n.receiveAttack(s):(o.push(r),n.receiveAttack(r))};return{attackPlayer:a,cpuBoard:c,cpuShips:i,receiveAttack:e=>c.receiveAttack(e,i)}},n=(e,r,n)=>{const c=t(e,r);return{Player:c,cpuPlayer:s(c,n)}},c={startGame:(r,t,s,c)=>{const i=n("example",s,c);return r&&t&&((r,t,s)=>{const n=s.Player.playerShips.coordinates,c=s.cpuPlayer.cpuShips.coordinates,i=e=>s.Player.receiveAttack(e),o=e=>s.cpuPlayer.receiveAttack(e),a=(r,t,s)=>{let n=!1;if(e(Object.values(r),t))return s(t),n=!0,!0;for(let c=0;c<r.length;c++){const i=r[c];if(e(i,t)){s(t),n=!0;break}}return n},d=(e,r)=>(r(e),!1),l=(e,r)=>{e.target.textContent=!1===r?"â€¢":"X"},u=e=>{const r=e.target.parentElement.className,t=(e=>{const r=[],t=e.slice(0,1),s=e.slice(2,3);return r.push(Number(t)),r.push(Number(s)),r})(e.target.className);if("grid-1"===r){const e=Object.values(n).filter((e=>void 0!==e));return!0===a(e,t,i)||d(t,i)}if("grid-2"===r){const e=Object.values(c).filter((e=>void 0!==e));return!0===a(e,t,o)||d(t,o)}};for(let e=0;e<r.length;e++)r[e].addEventListener("click",(e=>{!1===u(e)?l(e,!1):l(e,!0)})),t[e].addEventListener("click",(e=>{!1===u(e)?l(e,!1):l(e,!0)}))})(r.childNodes,t.childNodes,i),{currentGame:i,gridContainer1:r,gridContainer2:t}},displayGrid:(e,r)=>{(t=>{const s=t=>{if(10!==t){for(let s=0;s<10;s++){const n=document.createElement("div");n.className=`${t},${s}`;const c=document.createElement("div");c.className=`${t},${s}`,e&&e.appendChild(n),r&&r.appendChild(c)}s(t+1)}};s(0)})()},genDOMElements:()=>{const e=(e,r)=>{const t=document.getElementsByClassName(e)[r-1];t&&(t.style.border="1px solid green")};return{genGrid:(r,t)=>{const s=document.createElement("section");s.className="grids-container";const n=document.querySelector("main");n&&n.appendChild(s);const i=document.createElement("h3");i.textContent=`Player's ${r} Grid`,s.appendChild(i);const o=document.createElement("div");if(o.className=`grid-${r}`,s.appendChild(o),1===r?c.displayGrid(o,null):c.displayGrid(null,o),t){const n=document.createElement("button");n.className="start-button",s.appendChild(n),n.textContent="Start Game",((r,t)=>{const s=(e=>{const r=[];for(let t=0;t<e.length;t++){const s=e[t];"object"==typeof s[0]?r.push(...s):r.push(s)}return r})(r);for(let r=0;r<s.length;r++)e(`${(n=s[r]).slice(0,1)},${n.slice(1,2)}`,t);var n})(t,r)}return o},deleteElements:()=>{const e=document.getElementsByClassName("grids-container")[0];e&&e.remove()}}}};(()=>{const e=[[[0,1],[0,2],[0,3],[0,4]],[[2,1],[3,1],[4,1]],[[0,6],[0,7],[0,8]],[[3,3],[3,4]],[[6,3],[6,2]],[[6,8],[6,9]],[7,5],[9,2],[9,9],[8,7]],r=c.genDOMElements(),t=()=>{const t=c.startGame(r.genGrid(1),r.genGrid(2),e,e);r.deleteElements();const s=t.currentGame.Player,n=t.currentGame.cpuPlayer;return((e,r,t,s)=>{for(let e=0;e<s.childNodes.length;e++)s.childNodes[e].addEventListener("click",t.turnsLogic)})(0,0,((e,r)=>{let t=0;return{turnsLogic:()=>{e.cpuBoard.receivedAttacks.length===t+1&&(t++,e.attackPlayer(r))}}})(n,e),t.gridContainer2),{playerObj:s,cpuObj:n}};return{singlePlayer:t,setupDOM:()=>{r.genGrid(1,e);const s=document.getElementsByClassName("start-button")[0];s&&s.addEventListener("click",t)}}})().setupDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,