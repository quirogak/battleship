(()=>{"use strict";const e=(()=>{const e=e=>`${e.slice(0,1)},${e.slice(1,2)}`,t=(e,t,r)=>{const s=document.getElementsByClassName(e)[t-1];s&&(s.style.border=`1px solid ${r}`)};return{isTargetInArray:(e,t)=>{let r=!1;if(JSON.stringify(e)===JSON.stringify(t)&&(r=!0),!e)return r;if(!t)return r;for(let s=0;s<e.length;s++){const n=e[s];JSON.stringify(n)===JSON.stringify(t)&&(r=!0)}return r},changeCoordColor:t,indicateSunk:(r,s)=>{const{currentCoords:n}=r;if("number"==typeof n[0])t(e(n),s,"red");else for(let r=0;r<n.length;r++)t(e(n[r]),s,"red")},classToArray:e=>{const t=[],r=e.slice(0,1),s=e.slice(2,3);return t.push(Number(r)),t.push(Number(s)),t},coordToClass:e}})(),t=(()=>{const t=(e,t,r)=>{let s=t;const n=e;return{isSunk:()=>n===s,hit:()=>s++,currentHits:()=>s,currentCoords:r,shipLength:n}};return{Ship:t,Gameboard:()=>{const r=[],s=[];return{receiveAttack:(t,n)=>{const o=Object.entries(n.coordinates);r.push(t);for(let r=0;r<o.length;r++){let c=!1;const a=o[r][1],i=o[r][0];if(e.isTargetInArray(a,t)){if(c=!0,s.push(t),"carrier"===i&&(n.carrier.hit(),n.carrier.isSunk()))return n.carrier;if("battleShip"===i&&(n.battleShip.hit(),n.battleShip.isSunk()))return n.battleShip;if("battleShip1"===i&&(n.battleShip1.hit(),n.battleShip1.isSunk()))return n.battleShip1;if("cruiser"===i&&(n.cruiser.hit(),n.cruiser.isSunk()))return n.cruiser;if("cruiser1"===i&&(n.cruiser1.hit(),n.cruiser1.isSunk()))return n.cruiser1;if("cruiser2"===i&&(n.cruiser2.hit(),n.cruiser2.isSunk()))return n.cruiser2;if("destroyer"===i&&(n.destroyer.hit(),n.destroyer.isSunk()))return n.destroyer;if("destroyer1"===i&&(n.destroyer1.hit(),n.destroyer1.isSunk()))return n.destroyer1;if("destroyer2"===i&&(n.destroyer2.hit(),n.destroyer2.isSunk()))return n.destroyer2;if("destroyer3"===i&&(n.destroyer3.hit(),n.destroyer3.isSunk()))return n.destroyer3}if(!0===c)break}},deployShips:(e,r,s,n,o,c,a,i,d,l)=>{const u={carrier:e,battleShip:r,battleShip1:s,cruiser:n,cruiser1:o,cruiser2:c,destroyer:a,destroyer1:i,destroyer2:d,destroyer3:l};return{carrier:t(4,0,u.carrier),battleShip:t(3,0,u.battleShip),battleShip1:t(3,0,u.battleShip1),cruiser:t(2,0,u.cruiser),cruiser1:t(2,0,u.cruiser1),cruiser2:t(2,0,u.cruiser2),destroyer:t(1,0,u.destroyer),destroyer1:t(1,0,u.destroyer1),destroyer2:t(1,0,u.destroyer2),destroyer3:t(1,0,u.destroyer3),coordinates:u}},receivedAttacks:r,successAttacks:s,checkSunk:e=>{return!((t=e).carrier.currentCoords&&!t.carrier.isSunk()||t.battleShip.currentCoords&&!t.battleShip.isSunk()||t.battleShip1.currentCoords&&!t.battleShip1.isSunk()||t.cruiser.currentCoords&&!t.cruiser.isSunk()||t.cruiser1.currentCoords&&!t.cruiser1.isSunk()||t.cruiser2.currentCoords&&!t.cruiser2.isSunk()||t.destroyer.currentCoords&&!t.destroyer.isSunk()||t.destroyer1.currentCoords&&!t.destroyer1.isSunk()||t.destroyer2.currentCoords&&!t.destroyer2.isSunk()||t.destroyer3.currentCoords&&!t.destroyer3.isSunk());var t}}}}})(),r=(()=>{const r=(e,t,r)=>{let s=0;"cpu"===r&&(s=1);const n=document.getElementsByClassName(e)[s];n&&(n.textContent=!1===t?"â€¢":"X")},s=(t,r)=>{let s=0;"cpu"===r&&(s=1);const n=e.coordToClass(t),o=document.getElementsByClassName(n)[s];o&&o.replaceWith(o.cloneNode(!0))},n=e=>{const t=[];for(let s=0;s<e.length;s++)(r=e[s])[0]<0||r[1]<0||r[0]>9||r[1]>9||t.push(e[s]);var r;return t},o=e=>{const t=[],r=[e[0]-1,e[1]],s=[e[0]+1,e[1]],n=[e[0],e[1]+1],o=[e[0],e[1]-1];return t.push(r,s,n,o),t},c=(t,c,a,i,d)=>{const l=[];if("object"==typeof t[0])for(let e=0;e<t.length;e++)l.push(o(t[e]));else l.push(o(t));const u=n(l.flat());for(let t=0;t<u.length;t++)e.isTargetInArray(d,u[t])||(r(u[t],!1,i),s(u[t],i),c(u[t],a))},a=e=>{const t=[],r=[e[0]+1,e[1]+1],s=[e[0]+1,e[1]+-1],n=[e[0]-1,e[1]+1],o=[e[0]-1,e[1]-1];return t.push(r,s,n,o),t},i=(e,t,o)=>{const c=a(e),i=n(c);for(let e=0;e<i.length;e++)r(i[e],!1,o),s(i[e],o),t(i[e],!0)};return{Player:(r,s)=>{const n=r,o=s,a=t.Gameboard(),i=a.deployShips(...s);return{playerName:n,playerCoords:o,playerBoard:a,playerShips:i,receiveAttack:t=>{const r=a.receiveAttack(t,i);r&&(e.indicateSunk(r,1),c(r.currentCoords,a.receiveAttack,i,"player",a.successAttacks))}}},cpuPlayer:(s,n)=>{const o=s,a=n,d=t.Gameboard(),l=d.deployShips(...n),u=[],p=(t,s)=>{const n=e=>Math.floor(Math.random()*e),c=[n(10),n(10)];if(e.isTargetInArray(u,c)&&!0!==s)return p();return(t=>{o.receiveAttack(t),u.push(t);const s=o.playerBoard.successAttacks;return e.isTargetInArray(s,t)?(r(t,!0,"player"),i(t,p,"player"),t):r(t,!1,"player")})(t||c)};return{attackPlayer:p,cpuBoard:d,cpuShips:l,cpuCoords:a,usedCoords:u,receiveAttack:t=>{const r=d.receiveAttack(t,l);r&&(e.indicateSunk(r,2),c(r.currentCoords,d.receiveAttack,l,"cpu",d.successAttacks))}}},visualIndicators:r,attackCorners:i,attackAround:c,returnCorners:a,returnSides:o,validateCoords:n}})(),s=(e,t,s)=>{const n=r.Player(e,t);return{Player:n,cpuPlayer:r.cpuPlayer(n,s)}},n=(()=>{const t=(t,s)=>{const n=s.Player.playerShips.coordinates,o=s.cpuPlayer.cpuShips.coordinates,c=e=>s.Player.receiveAttack(e),a=e=>s.cpuPlayer.receiveAttack(e),i=(t,r,s)=>{let n=!1;if(e.isTargetInArray(Object.values(t),r))return s(r),n=!0,!0;for(let o=0;o<t.length;o++){const c=t[o];if(e.isTargetInArray(c,r)){s(r),n=!0;break}}return n},d=(e,t)=>(t(e),!1),l=t=>{const s=t.target.parentElement.className,l=t.target.className,u=e.classToArray(l);if("grid-1"===s){const e=Object.values(n).filter((e=>void 0!==e));!0===i(e,u,c)?(r.visualIndicators(l,!0,"player"),r.attackCorners(u,c,"player")):(d(u,c),r.visualIndicators(l,!1,"player"))}if("grid-2"===s){const e=Object.values(o).filter((e=>void 0!==e));!0===i(e,u,a)?(r.visualIndicators(l,!0,"cpu"),r.attackCorners(u,a,"cpu")):(d(u,a),r.visualIndicators(l,!1,"cpu"))}};for(let e=0;e<t.length;e++)t[e].addEventListener("click",l,{once:!0})};return{startGame:(e,r,n,o)=>{const c=s("example",n,o);return"shown-grid"!==e.className&&t(e.childNodes,c),"shown-grid"!==r.className&&t(r.childNodes,c),{currentGame:c,gridContainer1:e,gridContainer2:r}},displayGrid:(e,t)=>{(r=>{const s=r=>{if(10!==r){for(let s=0;s<10;s++){const n=document.createElement("div");n.className=`${r},${s}`;const o=document.createElement("div");o.className=`${r},${s}`,e&&e.appendChild(n),t&&t.appendChild(o)}s(r+1)}};s(0)})()},genDOMElements:()=>({genGrid:(t,r)=>{const s=document.createElement("section");s.className="grids-container";const o=document.querySelector("main");o&&o.appendChild(s);const c=document.createElement("h3");c.textContent=`Player's ${t} Grid`,s.appendChild(c);const a=document.createElement("div");a.className="grid-wrapper",((e,t)=>{const r=document.createElement("section"),s=document.createElement("section");r.classList.add("X"),s.classList.add("Y");const n=["A","B","C","D","E","F","G","H","I","J"];for(let e=1;e<=10;e++){const t=document.createElement("div");t.textContent=e,s.appendChild(t);const o=document.createElement("div");o.textContent=n[e-1],r.appendChild(o)}e.appendChild(r),t.appendChild(s)})(s,a),s.appendChild(a);const i=document.createElement("div");return i.className=`grid-${t}`,a.appendChild(i),1===t?n.displayGrid(i,null):n.displayGrid(null,i),r&&(i.className="shown-grid",((t,r)=>{const s=(e=>{const t=[];for(let r=0;r<e.length;r++){const s=e[r];"object"==typeof s[0]?t.push(...s):t.push(s)}return t})(t);for(let t=0;t<s.length;t++)e.changeCoordColor(e.coordToClass(s[t]),r,"green")})(r,t)),i},deleteElements:e=>{const t=document.getElementsByClassName("grids-container")[e];t&&t.remove()},genStartButton:()=>{const e=document.createElement("button");e.className="start-button",e.textContent="Start Game";const t=document.getElementsByClassName("grids-container")[0];t&&t.appendChild(e)},genRandomizeButton:()=>{const e=document.createElement("button");e.className="random-button",e.textContent="Randomize Coordinates";const t=document.getElementsByClassName("grids-container")[0];t&&t.appendChild(e)}}),endGame:e=>{const t=document.getElementsByClassName("grid-1")[0],r=document.getElementsByClassName("grid-2")[0];t&&t.replaceWith(t.cloneNode(!0)),r&&r.replaceWith(r.cloneNode(!0)),(e=>{const t=document.querySelector("body"),r=document.createElement("dialog");r.classList.add("modal"),t.appendChild(r);const s=document.createElement("div");r.appendChild(s),s.textContent=`Congratulations ${e}, you won!`;const n=document.createElement("button");n.textContent="New Game",n.addEventListener("click",(()=>window.location.reload())),r.appendChild(n),r.showModal()})(e)}}})();(()=>{const t=()=>{const t=e=>{const t=e=>{const t=[...r.returnCorners(e),...r.returnSides(e),e];return r.validateCoords(t)},s=[];if("object"!=typeof e[0]){const r=t(e);return s.push(...r),s}for(let r=0;r<e.length;r++){const n=t(e[r]);s.push(...n)}return[...new Set(s)]},s=e=>Math.floor(Math.random()*e),n=(e,t,r)=>{if(r){const t=[r[0]+1,r[1]],s=[r[0],r[1]+1];return"v"===e?t:s}let n;return n="v"===e?[s(10-t),s(10)]:[s(10),s(10-t)],1===t&&(n=[s(10),s(10)]),n},o=(t,r)=>{const c=[],a=0===s(2)?"h":"v",i=()=>{const s=n(a,t);e.isTargetInArray(r,s)?i():c.push(s)};for(let e=0;e<t;e++){const e=c[c.length-1],r=n(a,t,e);e?c.push(r):i()}if(1!==c.length){let s=!0;for(let t=0;t<c.length;t++){const n=c[t];e.isTargetInArray(r,n)&&(s=!1)}return!1===s?o(t,r):c}return c[0]};return{genBattleships:()=>{const e=[],r=o(4,e);e.push(...t(r));const s=o(3,e);e.push(...t(s));const n=o(3,e);e.push(...t(n));const c=o(2,e);e.push(...t(c));const a=o(2,e);e.push(...t(a));const i=o(2,e);e.push(...t(i));const d=o(1,e);e.push(...t(d));const l=o(1,e);e.push(...t(l));const u=o(1,e);e.push(...t(u));const p=o(1,e);return e.push(...t(p)),{coords:[r,s,n,c,a,i,d,l,u,p],usedCoords:e}},genShipCoord:o,surroundCoords:t}},s=n.genDOMElements(),o=(e,r)=>{let o;if(s.deleteElements(0),!0!==r){const r=t().genBattleships().coords;o=n.startGame(s.genGrid(1,e),s.genGrid(2),e,r)}else o=n.startGame(s.genGrid(1,e),s.genGrid(2),e,e);const c=o.currentGame.Player,a=o.currentGame.cpuPlayer,i=((e,t)=>{const r=e.playerShips,s=t.cpuShips;return{turnsLogic:()=>{let o=!1;return t.attackPlayer(),e.playerBoard.checkSunk(r)&&(n.endGame("Player1"),o=!0),t.cpuBoard.checkSunk(s)&&(n.endGame("Player2"),o=!0),o}}})(c,a);return((e,t)=>{for(let r=0;r<t.childNodes.length;r++)t.childNodes[r].addEventListener("click",(()=>{e.turnsLogic()}),{once:!0})})(i,o.gridContainer2),{playerObj:c,cpuObj:a,currentTurn:i}},c=(e,r)=>{s.genGrid(1,e),s.genStartButton(),s.genRandomizeButton();const n=document.getElementsByClassName("start-button")[0],a=document.getElementsByClassName("random-button")[0];a&&a.addEventListener("click",(()=>{s.deleteElements(0),c(t().genBattleships().coords)})),n&&n.addEventListener("click",(()=>{o(e,r)}))};return{singlePlayer:o,setupDOM:()=>{const e=t().genBattleships().coords;c(e,!0)},genCoords:t,genInitialElements:c}})().setupDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,