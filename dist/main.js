(()=>{"use strict";const e=(()=>{const e=e=>`${e.slice(0,1)},${e.slice(1,2)}`,t=(e,t,r)=>{const n=document.getElementsByClassName(e)[t-1];n&&(n.style.border=`1px solid ${r}`)};return{isTargetInArray:(e,t)=>{let r=!1;if(JSON.stringify(e)===JSON.stringify(t)&&(r=!0),!e)return r;if(!t)return r;for(let n=0;n<e.length;n++){const s=e[n];JSON.stringify(s)===JSON.stringify(t)&&(r=!0)}return r},changeCoordColor:t,indicateSunk:(r,n)=>{const{currentCoords:s}=r;if("number"==typeof s[0])t(e(s),n,"red");else for(let r=0;r<s.length;r++)t(e(s[r]),n,"red")},classToArray:e=>{const t=[],r=e.slice(0,1),n=e.slice(2,3);return t.push(Number(r)),t.push(Number(n)),t},coordToClass:e}})(),t=(()=>{const t=(e,t,r)=>{let n=t;const s=e;return{isSunk:()=>s===n,hit:()=>n++,currentHits:()=>n,currentCoords:r,shipLength:s}};return{Ship:t,Gameboard:()=>{const r=[],n=[];return{receiveAttack:(t,s)=>{const o=Object.entries(s.coordinates);r.push(t);for(let r=0;r<o.length;r++){let c=!1;const a=o[r][1],i=o[r][0];if(e.isTargetInArray(a,t)){if(c=!0,n.push(t),"carrier"===i&&(s.carrier.hit(),s.carrier.isSunk()))return s.carrier;if("battleShip"===i&&(s.battleShip.hit(),s.battleShip.isSunk()))return s.battleShip;if("battleShip1"===i&&(s.battleShip1.hit(),s.battleShip1.isSunk()))return s.battleShip1;if("cruiser"===i&&(s.cruiser.hit(),s.cruiser.isSunk()))return s.cruiser;if("cruiser1"===i&&(s.cruiser1.hit(),s.cruiser1.isSunk()))return s.cruiser1;if("cruiser2"===i&&(s.cruiser2.hit(),s.cruiser2.isSunk()))return s.cruiser2;if("destroyer"===i&&(s.destroyer.hit(),s.destroyer.isSunk()))return s.destroyer;if("destroyer1"===i&&(s.destroyer1.hit(),s.destroyer1.isSunk()))return s.destroyer1;if("destroyer2"===i&&(s.destroyer2.hit(),s.destroyer2.isSunk()))return s.destroyer2;if("destroyer3"===i&&(s.destroyer3.hit(),s.destroyer3.isSunk()))return s.destroyer3}if(!0===c)break}},deployShips:(e,r,n,s,o,c,a,i,d,l)=>{const u={carrier:e,battleShip:r,battleShip1:n,cruiser:s,cruiser1:o,cruiser2:c,destroyer:a,destroyer1:i,destroyer2:d,destroyer3:l};return{carrier:t(4,0,u.carrier),battleShip:t(3,0,u.battleShip),battleShip1:t(3,0,u.battleShip1),cruiser:t(2,0,u.cruiser),cruiser1:t(2,0,u.cruiser1),cruiser2:t(2,0,u.cruiser2),destroyer:t(1,0,u.destroyer),destroyer1:t(1,0,u.destroyer1),destroyer2:t(1,0,u.destroyer2),destroyer3:t(1,0,u.destroyer3),coordinates:u}},receivedAttacks:r,successAttacks:n,checkSunk:e=>{return!((t=e).carrier.currentCoords&&!t.carrier.isSunk()||t.battleShip.currentCoords&&!t.battleShip.isSunk()||t.battleShip1.currentCoords&&!t.battleShip1.isSunk()||t.cruiser.currentCoords&&!t.cruiser.isSunk()||t.cruiser1.currentCoords&&!t.cruiser1.isSunk()||t.cruiser2.currentCoords&&!t.cruiser2.isSunk()||t.destroyer.currentCoords&&!t.destroyer.isSunk()||t.destroyer1.currentCoords&&!t.destroyer1.isSunk()||t.destroyer2.currentCoords&&!t.destroyer2.isSunk()||t.destroyer3.currentCoords&&!t.destroyer3.isSunk());var t}}}}})(),r=(()=>{const r=(e,t,r)=>{let n=0;"cpu"===r&&(n=1);const s=document.getElementsByClassName(e)[n];s&&(s.textContent=!1===t?"â€¢":"X")},n=(t,r)=>{let n=0;"cpu"===r&&(n=1);const s=e.coordToClass(t),o=document.getElementsByClassName(s)[n];o&&o.replaceWith(o.cloneNode(!0))},s=e=>{const t=[];for(let n=0;n<e.length;n++)(r=e[n])[0]<0||r[1]<0||r[0]>9||r[1]>9||t.push(e[n]);var r;return t},o=e=>{const t=[],r=[e[0]-1,e[1]],n=[e[0]+1,e[1]],s=[e[0],e[1]+1],o=[e[0],e[1]-1];return t.push(r,n,s,o),t},c=(t,c,a,i,d)=>{const l=[];if("object"==typeof t[0])for(let e=0;e<t.length;e++)l.push(o(t[e]));else l.push(o(t));const u=s(l.flat());for(let t=0;t<u.length;t++)e.isTargetInArray(d,u[t])||(r(u[t],!1,i),n(u[t],i),c(u[t],a))},a=e=>{const t=[],r=[e[0]+1,e[1]+1],n=[e[0]+1,e[1]+-1],s=[e[0]-1,e[1]+1],o=[e[0]-1,e[1]-1];return t.push(r,n,s,o),t},i=(e,t,o)=>{const c=a(e),i=s(c);for(let e=0;e<i.length;e++)r(i[e],!1,o),n(i[e],o),t(i[e],!0)};return{Player:(r,n)=>{const s=r,o=n,a=t.Gameboard(),i=a.deployShips(...n);return{playerName:s,playerCoords:o,playerBoard:a,playerShips:i,receiveAttack:t=>{const r=a.receiveAttack(t,i);r&&(e.indicateSunk(r,1),c(r.currentCoords,a.receiveAttack,i,"player",a.successAttacks))}}},cpuPlayer:(n,s)=>{const o=n,a=s,d=t.Gameboard(),l=d.deployShips(...s),u=[],p=(t,n)=>{const s=e=>Math.floor(Math.random()*e),c=[s(10),s(10)];if(e.isTargetInArray(u,c)&&!0!==n)return p();return(t=>{o.receiveAttack(t),u.push(t);const n=o.playerBoard.successAttacks;return e.isTargetInArray(n,t)?(r(t,!0,"player"),i(t,p,"player"),t):r(t,!1,"player")})(t||c)};return{attackPlayer:p,cpuBoard:d,cpuShips:l,cpuCoords:a,usedCoords:u,receiveAttack:t=>{const r=d.receiveAttack(t,l);r&&(e.indicateSunk(r,2),c(r.currentCoords,d.receiveAttack,l,"cpu",d.successAttacks))}}},visualIndicators:r,attackCorners:i,attackAround:c,returnCorners:a,returnSides:o,validateCoords:s}})(),n=(e,t,n)=>{const s=r.Player(e,t);return{Player:s,cpuPlayer:r.cpuPlayer(s,n)}},s=(()=>{const t=(t,n)=>{const s=n.Player.playerShips.coordinates,o=n.cpuPlayer.cpuShips.coordinates,c=e=>n.Player.receiveAttack(e),a=e=>n.cpuPlayer.receiveAttack(e),i=(t,r,n)=>{let s=!1;if(e.isTargetInArray(Object.values(t),r))return n(r),s=!0,!0;for(let o=0;o<t.length;o++){const c=t[o];if(e.isTargetInArray(c,r)){n(r),s=!0;break}}return s},d=(e,t)=>(t(e),!1),l=t=>{const n=t.target.parentElement.className,l=t.target.className,u=e.classToArray(l);if("grid-1"===n){const e=Object.values(s).filter((e=>void 0!==e));!0===i(e,u,c)?(r.visualIndicators(l,!0,"player"),r.attackCorners(u,c,"player")):(d(u,c),r.visualIndicators(l,!1,"player"))}if("grid-2"===n){const e=Object.values(o).filter((e=>void 0!==e));!0===i(e,u,a)?(r.visualIndicators(l,!0,"cpu"),r.attackCorners(u,a,"cpu")):(d(u,a),r.visualIndicators(l,!1,"cpu"))}};for(let e=0;e<t.length;e++)t[e].addEventListener("click",l,{once:!0})};return{startGame:(e,r,s,o)=>{const c=n("example",s,o);return"shown-grid"!==e.className&&t(e.childNodes,c),"shown-grid"!==r.className&&t(r.childNodes,c),{currentGame:c,gridContainer1:e,gridContainer2:r}},displayGrid:(e,t)=>{(r=>{const n=r=>{if(10!==r){for(let n=0;n<10;n++){const s=document.createElement("div");s.className=`${r},${n}`;const o=document.createElement("div");o.className=`${r},${n}`,e&&e.appendChild(s),t&&t.appendChild(o)}n(r+1)}};n(0)})()},genDOMElements:()=>({genGrid:(t,r)=>{const n=document.createElement("section");n.className="main-container";const o=document.querySelector("main");o&&o.appendChild(n);const c=document.createElement("div");c.className="grids-container",n&&n.appendChild(c);const a=document.createElement("h3");a.textContent=`Player's ${t} Grid`,c.appendChild(a);const i=document.createElement("div");i.className="grid-wrapper",((e,t)=>{const r=document.createElement("section"),n=document.createElement("section");r.classList.add("X"),n.classList.add("Y");const s=["A","B","C","D","E","F","G","H","I","J"];for(let e=1;e<=10;e++){const t=document.createElement("div");t.textContent=e,n.appendChild(t);const o=document.createElement("div");o.textContent=s[e-1],r.appendChild(o)}e.appendChild(r),t.appendChild(n)})(c,i),c.appendChild(i);const d=document.createElement("div");return d.className=`grid-${t}`,i.appendChild(d),1===t?s.displayGrid(d,null):s.displayGrid(null,d),r&&(d.className="shown-grid",((t,r)=>{const n=(e=>{const t=[];for(let r=0;r<e.length;r++){const n=e[r];"object"==typeof n[0]?t.push(...n):t.push(n)}return t})(t);for(let t=0;t<n.length;t++)e.changeCoordColor(e.coordToClass(n[t]),r,"green")})(r,t)),d},deleteElements:e=>{const t=document.getElementsByClassName("main-container")[e];t&&t.remove()},genButtons:()=>{(()=>{const e=document.createElement("div");e.classList.add("button-wrapper");const t=document.getElementsByClassName("grids-container")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="random-button",e.textContent="Randomize";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="start-button",e.textContent="Start Game";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="customize-button",e.textContent="Customize";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})()},genCoordInputs:()=>{const e=document.getElementsByClassName("main-container")[0],t=document.createElement("label");t.classList.add("inputs-container"),t.htmlFor="select-ships",t.textContent="Set Initial Coord",e.appendChild(t);const r=document.createElement("select");r.classList.add("select-ships"),t.appendChild(r);const n=document.createElement("div");n.classList.add("input-wrapper"),t.appendChild(n);const s=document.createElement("input");s.classList.add("coords-input"),n.appendChild(s);const o=document.createElement("p");o.classList.add("input-text"),o.textContent=",",n.appendChild(o);const c=document.createElement("input");c.classList.add("coords-input"),n.appendChild(c);const a=document.createElement("button");a.classList.add("apply-coords"),a.textContent="Apply",t.appendChild(a);const i=document.createElement("option");i.value="carrier",i.textContent="Carrier",r.appendChild(i);const d=document.createElement("option");d.value="battleship1",d.textContent="Battleship 1",r.appendChild(d);const l=document.createElement("option");l.value="battleship2",l.textContent="Battleship 2",r.appendChild(l);const u=document.createElement("option");u.value="cruiser1",u.textContent="Cruiser 1",r.appendChild(u);const p=document.createElement("option");p.value="cruiser2",p.textContent="Cruiser 2",r.appendChild(p);const m=document.createElement("option");m.value="cruiser3",m.textContent="Cruiser 3",r.appendChild(m);const h=document.createElement("option");h.value="destroyer1",h.textContent="Destroyer 1",r.appendChild(h);const y=document.createElement("option");y.value="destroyer2",y.textContent="Destroyer 2",r.appendChild(y);const C=document.createElement("option");C.value="destroyer3",C.textContent="Destroyer 3",r.appendChild(C);const g=document.createElement("option");g.value="destroyer4",g.textContent="Destroyer 4",r.appendChild(g)}}),endGame:()=>{const e=document.getElementsByClassName("grid-1")[0],t=document.getElementsByClassName("grid-2")[0];e&&e.replaceWith(e.cloneNode(!0)),t&&t.replaceWith(t.cloneNode(!0))},createModal:(e,t)=>{const r=document.querySelector("body"),n=document.createElement("dialog");n.classList.add("modal"),r.appendChild(n);const s=document.createElement("div");n.appendChild(s),s.textContent=t?`${e} won, try again!`:`Congratulations ${e}, you won!`;const o=document.createElement("button");o.textContent="New Game",o.addEventListener("click",(()=>window.location.reload())),n.appendChild(o),n&&n.showModal()}}})();(()=>{const t=s.genDOMElements(),n=e=>{if(e){const t=e.filter((e=>"object"==typeof e[0])),r=e.filter((e=>"number"==typeof e[0]));return t.flat().concat(r)}},o=e=>{const t=e=>{const t=[...r.returnCorners(e),...r.returnSides(e),e];return r.validateCoords(t)},n=[];if("object"!=typeof e[0]){const r=t(e);return n.push(...r),[...new Set(n.map((e=>JSON.stringify(e))))].map((e=>JSON.parse(e)))}for(let r=0;r<e.length;r++){const s=t(e[r]);n.push(...s)}return[...new Set(n.map((e=>JSON.stringify(e))))].map((e=>JSON.parse(e)))},c=()=>{const t=e=>Math.floor(Math.random()*e),r=(e,r,n)=>{if(n){const t=[n[0]+1,n[1]],r=[n[0],n[1]+1];return"v"===e?t:r}let s;return s="v"===e?[t(10-r),t(10)]:[t(10),t(10-r)],1===r&&(s=[t(10),t(10)]),s},s=(o,c)=>{const a=[],i=0===t(2)?"h":"v",d=n(c),l=()=>{const t=r(i,o);e.isTargetInArray(d,t)?l():a.push(t)};for(let e=0;e<o;e++){const e=a[a.length-1],t=r(i,o,e);e?a.push(t):l()}if(1!==a.length){let t=!0;for(let r=0;r<a.length;r++){const n=a[r];e.isTargetInArray(d,n)&&(t=!1)}return!1===t?s(o,d):a}return a[0]};return{genBattleships:()=>{const e=[],t=s(4,e);e.push(o(t));const r=s(3,e);e.push(o(r));const n=s(3,e);e.push(o(n));const c=s(2,e);e.push(o(c));const a=s(2,e);e.push(o(a));const i=s(2,e);e.push(o(i));const d=s(1,e);e.push(o(d));const l=s(1,e);e.push(o(l));const u=s(1,e);e.push(o(u));const p=s(1,e);return e.push(o(p)),{coords:[t,r,n,c,a,i,d,l,u,p],usedCoords:e}},genShipCoord:s,surroundCoords:o}},a=e=>{if("v"==(e.coords[0][0]+1===e.coords[1][0]?"v":"h")){let t=[e.firstCoord];for(let r=0;r<e.coords.length-1;r++){const e=[t[r][0],t[r][1]+1];t=t.concat([e])}return t}let t=[e.firstCoord];for(let r=0;r<e.coords.length-1;r++){const e=[t[r][0]+1,t[r][1]];t=t.concat([e])}return t},i=(t,s)=>{let c=!0;const a=t.coords,{coordsPosition:i}=t,d=[...s];d[i]=[];const l=n(d);if(r.validateCoords(a).length!==a.length)return s;for(let t=0;t<a.length;t++)e.isTargetInArray(l,a[t])&&(c=!1);const u=o(a);return!0===c?(d[i]=u,d):s},d=(e,r)=>{let n;if(t.deleteElements(0),!0!==r){const r=c().genBattleships().coords;n=s.startGame(t.genGrid(1,e),t.genGrid(2),e,r)}else n=s.startGame(t.genGrid(1,e),t.genGrid(2),e,e);const o=n.currentGame.Player,a=n.currentGame.cpuPlayer,i=((e,t)=>{const r=e.playerShips,n=t.cpuShips;return{turnsLogic:()=>{let o=!1;return t.attackPlayer(),e.playerBoard.checkSunk(r)&&(s.endGame(),s.createModal("Player2",!0),o=!0),t.cpuBoard.checkSunk(n)&&(s.endGame(),s.createModal("Player1"),o=!0),o}}})(o,a);return((e,t)=>{for(let r=0;r<t.childNodes.length;r++)t.childNodes[r].addEventListener("click",(()=>{e.turnsLogic()}),{once:!0})})(i,n.gridContainer2),{playerObj:o,cpuObj:a,currentTurn:i}},l=(r,s,o,u)=>{t.genGrid(1,r),t.genButtons(),((r,s,o,c)=>{const d=r.filter((e=>"object"==typeof e[0])),l=n(d),u=n=>{const o=n.target.className,l=(t=>{for(let r=0;r<d.length;r++){const n=d[r],s=[n,r];if(e.isTargetInArray(n,t))return s}})(e.classToArray(o)),u={coords:l[0],firstCoord:l[0][0],coordsPosition:l[1]};return u.coords=a(u),i(u,s)!==s?(t.deleteElements(0),c(((e,t)=>{const r=[...t];return r.splice(e.coordsPosition,1,e.coords),r})(u,r),!1,i(u,s),!0)):(t=>{for(let r=0;r<t.length;r++){const n=e.coordToClass(t[r]),s=document.getElementsByClassName(n)[0];s.classList.add("invalid-rotation"),setTimeout((()=>{s.classList.remove("invalid-rotation")}),1e3)}})(l[0])};for(let t=0;t<l.length;t++){const r=e.coordToClass(l[t]),n=document.getElementsByClassName(r)[o];n&&n.addEventListener("click",u)}})(r,o,0,l);const p=document.getElementsByClassName("start-button")[0],m=document.getElementsByClassName("random-button")[0],h=document.getElementsByClassName("customize-button")[0];m&&m.addEventListener("click",(()=>{(e=>{t.deleteElements(0);const r=c().genBattleships(),n=r.coords,s=r.usedCoords;l(n,!1,s)})()})),h&&(h.addEventListener("click",(()=>{t.genCoordInputs()}),{once:!0}),u&&h.click()),p&&p.addEventListener("click",(()=>{d(r,s)}))};return{singlePlayer:d,setupDOM:()=>{const e=c().genBattleships(),t=e.coords,{usedCoords:r}=e;l(t,!1,r)},genCoords:c,genInitialElements:l,rotateCoords:a}})().setupDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,