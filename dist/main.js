/* eslint-disable */
(() => { "use strict"; const e = (e, r) => { let t = !1; if (JSON.stringify(e) === JSON.stringify(r) && (t = !0), void 0 === e) return t; if (void 0 === r) return t; for (let s = 0; s < e.length; s++) { const i = e[s]; JSON.stringify(i) === JSON.stringify(r) && (t = !0) } return t }, r = (() => { const r = (e, r, t) => { let s = r; const i = e; return { isSunk: () => i === s, hit: () => s++, currentHits: () => s, currentCords: t, shipLength: i } }; return { Ship: r, Gameboard: () => { const t = [], s = []; return { receiveAttack: (r, i) => { const n = Object.entries(i.coordinates); for (let t = 0; t < n.length; t++) { let c = !1; const o = n[t][1], d = n[t][0]; if (e(o, r) && (c = !0, s.push(r), "carrier" === d && i.carrier.hit(), "battleShip" === d && i.battleShip.hit(), "battleShip1" === d && i.battleShip1.hit(), "cruiser" === d && i.cruiser.hit(), "cruiser1" === d && i.cruiser1.hit(), "cruiser2" === d && i.cruiser2.hit(), "destroyer" === d && i.destroyer.hit(), "destroyer1" === d && i.destroyer1.hit(), "destroyer2" === d && i.destroyer2.hit(), "destroyer3" === d && i.destroyer3.hit()), !0 === c) break } e(s, r) || t.push(r) }, deployShips: (e, t, s, i, n, c, o, d, a, l) => { const u = { carrier: e, battleShip: t, battleShip1: s, cruiser: i, cruiser1: n, cruiser2: c, destroyer: o, destroyer1: d, destroyer2: a, destroyer3: l }; return { carrier: r(4, 0, u.carrier), battleShip: r(3, 0, u.battleShip), battleShip1: r(3, 0, u.battleShip1), cruiser: r(2, 0, u.cruiser), cruiser1: r(2, 0, u.cruiser1), cruiser2: r(2, 0, u.cruiser2), destroyer: r(1, 0, u.destroyer), destroyer1: r(1, 0, u.destroyer1), destroyer2: r(1, 0, u.destroyer2), destroyer3: r(1, 0, u.destroyer3), coordinates: u } }, missedAttacks: t, successAttacks: s, checkSunk: e => { return !(void 0 !== (r = e).carrier.currentCords && !r.carrier.isSunk() || void 0 !== r.battleShip.currentCords && !r.battleShip.isSunk() || void 0 !== r.battleShip1.currentCords && !r.battleShip1.isSunk() || void 0 !== r.cruiser.currentCords && !r.cruiser.isSunk() || void 0 !== r.cruiser1.currentCords && !r.cruiser1.isSunk() || void 0 !== r.cruiser2.currentCords && !r.cruiser2.isSunk() || void 0 !== r.destroyer.currentCords && !r.destroyer.isSunk() || void 0 !== r.destroyer1.currentCords && !r.destroyer1.isSunk() || void 0 !== r.destroyer2.currentCords && !r.destroyer2.isSunk() || void 0 !== r.destroyer3.currentCords && !r.destroyer3.isSunk()); var r } } } } })(), t = (e, t) => { const s = e, i = r.Gameboard(), n = i.deployShips(...t); return { playerName: s, playerBoard: i, playerShips: n, receiveAttack: e => i.receiveAttack(e, n) } }, s = (t, s) => { const i = t, n = r.Gameboard(), c = n.deployShips(...s), o = [], d = r => { const t = e => Math.floor(Math.random() * e), s = [t(9), t(9)]; return e(o, r) || e(o, s) ? d() : void 0 !== r ? (o.push(r), i.receiveAttack(r)) : i.receiveAttack(s) }; return { attackPlayer: d, cpuBoard: n, cpuShips: c, receiveAttack: e => n.receiveAttack(e, c) } }, i = (e, r, i) => { const n = t(e, r); return { Player: n, cpuPlayer: s(n, i) } }, n = { startGame: (r, t, s, n) => { const c = i("example", s, n); return null != r && null != t && ((r, t, s) => { const i = s.Player.playerShips.coordinates, n = s.cpuPlayer.cpuShips.coordinates, c = e => s.Player.receiveAttack(e), o = e => s.cpuPlayer.receiveAttack(e), d = (r, t, s) => { let i = !1; if (e(Object.values(r), t)) return s(t), i = !0, i; for (let n = 0; n < r.length; n++) { const c = r[n]; if (e(c, t)) { s(t), i = !0; break } } return i }, a = (e, r) => { e.target.textContent = !1 === r ? "â€¢" : "X" }, l = e => { const r = e.target.parentElement.className, t = (e => { const r = [], t = e.slice(0, 1), s = e.slice(2, 3); return r.push(Number(t)), r.push(Number(s)), r })(e.target.className); if ("grid-1" === r) { const e = Object.values(i).filter((e => void 0 !== e)); return d(e, t, c) } if ("grid-2" === r) { const e = Object.values(n).filter((e => void 0 !== e)); return d(e, t, o) } }; for (let e = 0; e < r.length; e++)r[e].addEventListener("click", (e => { !1 === l(e) ? a(e, !1) : a(e, !0) })), t[e].addEventListener("click", (e => { !1 === l(e) ? a(e, !1) : a(e, !0) })) })(r.childNodes, t.childNodes, c), { currentGame: c } }, displayGrid: (e, r) => { (t => { const s = t => { if (10 !== t) { for (let s = 0; s < 10; s++) { const i = document.createElement("div"); i.className = `${t},${s}`; const n = document.createElement("div"); n.className = `${t},${s}`, null != e && e.appendChild(i), null != r && r.appendChild(n) } s(t + 1) } }; s(0) })() }, genDOMElements: () => { const e = (e, r) => { const t = document.getElementsByClassName(e)[r - 1]; void 0 !== t && (t.style.border = "1px solid green") }, r = [[[0, 1], [0, 2], [0, 3], [0, 4]], [[2, 1], [3, 1], [4, 1]], [[0, 6], [0, 7], [0, 8]], [[3, 3], [3, 4]], [[6, 3], [6, 2]], [[6, 8], [6, 9]], [7, 5], [9, 2], [9, 9], [8, 7]], t = document.getElementsByClassName("grids-container")[0], s = document.getElementsByClassName("start-button")[0], i = () => { const i = document.createElement("div"); return i.className = "grid-1", void 0 !== t && t.insertBefore(i, s), n.displayGrid(i), ((r, t) => { const s = (e => { const r = []; for (let t = 0; t < e.length; t++) { const s = e[t]; "object" == typeof s[0] ? r.push(...s) : r.push(s) } return r })(r); for (let r = 0; r < s.length; r++)e(`${(i = s[r]).slice(0, 1)},${i.slice(1, 2)}`, 1); var i })(r), i }, c = () => { const e = document.createElement("section"); e.className = "grids-container", document.querySelector("main").appendChild(e); const r = document.createElement("h3"); r.textContent = "Cpu Grid", e.appendChild(r); const t = document.createElement("div"); return t.className = "grid-2", e.appendChild(t), n.displayGrid(null, t), t }; return void 0 !== s && s.addEventListener("click", (() => { n.startGame(i(), c(), r, r), document.getElementsByClassName("grid-1")[0].remove(), s.remove() })), { genPlayerGrid: i, genCpuGrid: c } } }; n.genDOMElements().genPlayerGrid() })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFZLEtBQU1FLEdBRXBCQSxDQUFLLEVBMEJkLFlBWG9CbEgsSUFBaEJxSSxHQUNGQSxFQUFZeEIsaUJBQWlCLFNBQVMsS0FDcENuQyxFQUFTQyxVQUNQMkQsSUFDQU0sSUFDQVQsRUFDQUEsR0FoQlVaLFNBQVNTLHVCQUF1QixVQUFVLEdBRWxEZSxTQUNOVixFQUFZVSxRQWVLLElBR1osQ0FBRVQsZ0JBQWVNLGFBQVcsR0FXbkNsRSxFQUFTa0QsaUJBQWlCVSxlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1RhcmdldEluQXJyYXkgPSAoYXJyLCB0YXJnZXQpID0+IHtcbiAgbGV0IGNvbnRhaW5zID0gZmFsc2U7XG5cbiAgaWYgKEpTT04uc3RyaW5naWZ5KGFycikgPT09IEpTT04uc3RyaW5naWZ5KHRhcmdldCkpIGNvbnRhaW5zID0gdHJ1ZTtcblxuICBpZiAoYXJyID09PSB1bmRlZmluZWQpIHJldHVybiBjb250YWlucztcblxuICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHJldHVybiBjb250YWlucztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJbaV07XG5cbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZWxlbWVudCkgPT09IEpTT04uc3RyaW5naWZ5KHRhcmdldCkpIGNvbnRhaW5zID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBjb250YWlucztcbn07XG5cbmNvbnN0IG1haW5PYmplY3RzID0gKCgpID0+IHtcbiAgY29uc3QgU2hpcCA9IChsZW5ndGhOdW1iZXIsIGhpdHNOdW1iZXIsIGNvb3JkcykgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRDb3JkcyA9IGNvb3JkcztcblxuICAgIGNvbnN0IGNoZWNrU3VuayA9IChsZW5ndGgsIGhpdHMpID0+IHtcbiAgICAgIGlmIChsZW5ndGggPT09IGhpdHMpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBsZXQgc2hpcEhpdHMgPSBoaXRzTnVtYmVyO1xuXG4gICAgY29uc3Qgc2hpcExlbmd0aCA9IGxlbmd0aE51bWJlcjtcblxuICAgIGNvbnN0IGlzU3VuayA9ICgpID0+IGNoZWNrU3VuayhzaGlwTGVuZ3RoLCBzaGlwSGl0cyk7XG5cbiAgICBjb25zdCBoaXQgPSAoKSA9PiBzaGlwSGl0cysrO1xuXG4gICAgY29uc3QgY3VycmVudEhpdHMgPSAoKSA9PiBzaGlwSGl0cztcblxuICAgIHJldHVybiB7IGlzU3VuaywgaGl0LCBjdXJyZW50SGl0cywgY3VycmVudENvcmRzLCBzaGlwTGVuZ3RoIH07XG4gIH07XG5cbiAgY29uc3QgR2FtZWJvYXJkID0gKCkgPT4ge1xuICAgIGNvbnN0IGRlcGxveVNoaXBzID0gKFxuICAgICAgY2FycmllckNvcmRzLFxuICAgICAgYmF0dGxlU2hpcENvcmRzLFxuICAgICAgYmF0dGxlU2hpcDFDb3JkcyxcbiAgICAgIGNydWlzZXJDb3JkcyxcbiAgICAgIGNydWlzZXIxQ29yZHMsXG4gICAgICBjcnVpc2VyMkNvcmRzLFxuICAgICAgZGVzdHJveWVyQ29yZHMsXG4gICAgICBkZXN0cm95ZXIxQ29yZHMsXG4gICAgICBkZXN0cm95ZXIyQ29yZHMsXG4gICAgICBkZXN0cm95ZXIzQ29yZHNcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0ge1xuICAgICAgICBjYXJyaWVyOiBjYXJyaWVyQ29yZHMsXG4gICAgICAgIGJhdHRsZVNoaXA6IGJhdHRsZVNoaXBDb3JkcyxcbiAgICAgICAgYmF0dGxlU2hpcDE6IGJhdHRsZVNoaXAxQ29yZHMsXG4gICAgICAgIGNydWlzZXI6IGNydWlzZXJDb3JkcyxcbiAgICAgICAgY3J1aXNlcjE6IGNydWlzZXIxQ29yZHMsXG4gICAgICAgIGNydWlzZXIyOiBjcnVpc2VyMkNvcmRzLFxuICAgICAgICBkZXN0cm95ZXI6IGRlc3Ryb3llckNvcmRzLFxuICAgICAgICBkZXN0cm95ZXIxOiBkZXN0cm95ZXIxQ29yZHMsXG4gICAgICAgIGRlc3Ryb3llcjI6IGRlc3Ryb3llcjJDb3JkcyxcbiAgICAgICAgZGVzdHJveWVyMzogZGVzdHJveWVyM0NvcmRzLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY2FycmllciA9IFNoaXAoNCwgMCwgY29vcmRpbmF0ZXMuY2Fycmllcik7XG5cbiAgICAgIGNvbnN0IGJhdHRsZVNoaXAgPSBTaGlwKDMsIDAsIGNvb3JkaW5hdGVzLmJhdHRsZVNoaXApO1xuXG4gICAgICBjb25zdCBiYXR0bGVTaGlwMSA9IFNoaXAoMywgMCwgY29vcmRpbmF0ZXMuYmF0dGxlU2hpcDEpO1xuXG4gICAgICBjb25zdCBjcnVpc2VyID0gU2hpcCgyLCAwLCBjb29yZGluYXRlcy5jcnVpc2VyKTtcblxuICAgICAgY29uc3QgY3J1aXNlcjEgPSBTaGlwKDIsIDAsIGNvb3JkaW5hdGVzLmNydWlzZXIxKTtcblxuICAgICAgY29uc3QgY3J1aXNlcjIgPSBTaGlwKDIsIDAsIGNvb3JkaW5hdGVzLmNydWlzZXIyKTtcblxuICAgICAgY29uc3QgZGVzdHJveWVyID0gU2hpcCgxLCAwLCBjb29yZGluYXRlcy5kZXN0cm95ZXIpO1xuXG4gICAgICBjb25zdCBkZXN0cm95ZXIxID0gU2hpcCgxLCAwLCBjb29yZGluYXRlcy5kZXN0cm95ZXIxKTtcblxuICAgICAgY29uc3QgZGVzdHJveWVyMiA9IFNoaXAoMSwgMCwgY29vcmRpbmF0ZXMuZGVzdHJveWVyMik7XG5cbiAgICAgIGNvbnN0IGRlc3Ryb3llcjMgPSBTaGlwKDEsIDAsIGNvb3JkaW5hdGVzLmRlc3Ryb3llcjMpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYXJyaWVyLFxuICAgICAgICBiYXR0bGVTaGlwLFxuICAgICAgICBiYXR0bGVTaGlwMSxcbiAgICAgICAgY3J1aXNlcixcbiAgICAgICAgY3J1aXNlcjEsXG4gICAgICAgIGNydWlzZXIyLFxuICAgICAgICBkZXN0cm95ZXIsXG4gICAgICAgIGRlc3Ryb3llcjEsXG4gICAgICAgIGRlc3Ryb3llcjIsXG4gICAgICAgIGRlc3Ryb3llcjMsXG4gICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgbWlzc2VkQXR0YWNrcyA9IFtdO1xuXG4gICAgY29uc3Qgc3VjY2Vzc0F0dGFja3MgPSBbXTtcblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAodGFyZ2V0Q29yZHMsIHBsYXllclNoaXBzKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50U2hpcHMgPSBPYmplY3QuZW50cmllcyhwbGF5ZXJTaGlwcy5jb29yZGluYXRlcyk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNoaXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgc2hpcENvcmRzID0gY3VycmVudFNoaXBzW2ldWzFdO1xuXG4gICAgICAgIGNvbnN0IHNoaXBOYW1lID0gY3VycmVudFNoaXBzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpc1RhcmdldEluQXJyYXkoc2hpcENvcmRzLCB0YXJnZXRDb3JkcykpIHtcbiAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcblxuICAgICAgICAgIHN1Y2Nlc3NBdHRhY2tzLnB1c2godGFyZ2V0Q29yZHMpO1xuXG4gICAgICAgICAgLy8gaWYgdGhlIHRhcmdldCBjb3JkcyBtYXRjaGVzIGEgc2hpcCBjb3Jkcy5cbiAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiY2FycmllclwiKSBwbGF5ZXJTaGlwcy5jYXJyaWVyLmhpdCgpO1xuICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJiYXR0bGVTaGlwXCIpIHBsYXllclNoaXBzLmJhdHRsZVNoaXAuaGl0KCk7XG4gICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImJhdHRsZVNoaXAxXCIpIHBsYXllclNoaXBzLmJhdHRsZVNoaXAxLmhpdCgpO1xuICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJjcnVpc2VyXCIpIHBsYXllclNoaXBzLmNydWlzZXIuaGl0KCk7XG4gICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImNydWlzZXIxXCIpIHBsYXllclNoaXBzLmNydWlzZXIxLmhpdCgpO1xuICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJjcnVpc2VyMlwiKSBwbGF5ZXJTaGlwcy5jcnVpc2VyMi5oaXQoKTtcbiAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiZGVzdHJveWVyXCIpIHBsYXllclNoaXBzLmRlc3Ryb3llci5oaXQoKTtcbiAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiZGVzdHJveWVyMVwiKSBwbGF5ZXJTaGlwcy5kZXN0cm95ZXIxLmhpdCgpO1xuICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJkZXN0cm95ZXIyXCIpIHBsYXllclNoaXBzLmRlc3Ryb3llcjIuaGl0KCk7XG4gICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImRlc3Ryb3llcjNcIikgcGxheWVyU2hpcHMuZGVzdHJveWVyMy5oaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWNjZXNzID09PSB0cnVlKSBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1RhcmdldEluQXJyYXkoc3VjY2Vzc0F0dGFja3MsIHRhcmdldENvcmRzKSlcbiAgICAgICAgbWlzc2VkQXR0YWNrcy5wdXNoKHRhcmdldENvcmRzKTsgLy8gaWYgdGhlIHRhcmdldCBjb3JkcyBhcmUgbm90IGluc2lkZSBzdWNjZXNzQXR0YWNrcywgaXQgaXMgYSBtaXNzZWQgYXR0YWNrLlxuICAgIH07XG5cbiAgICBjb25zdCBjaGVja1N1bmsgPSAocGxheWVyU2hpcHMpID0+IHtcbiAgICAgIGNvbnN0IGFyZUFsbFN1bmsgPSAoc2hpcHMpID0+IHtcbiAgICAgICAgLy8gZWl0aGVyIHdlIGRpZG4ndCBkZWZpbmVkIHRoZSBjb3JkcyBvZiBhIHNoaXAgKHVuZGVmaW5lZCksIG9yIGl0IGlzIGFjdHVhbGx5IHN1bmssIHdlIHRha2UgdGhhdCBhcyB0cnVlLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgKHNoaXBzLmNhcnJpZXIuY3VycmVudENvcmRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHNoaXBzLmNhcnJpZXIuaXNTdW5rKCkpICYmXG4gICAgICAgICAgKHNoaXBzLmJhdHRsZVNoaXAuY3VycmVudENvcmRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHNoaXBzLmJhdHRsZVNoaXAuaXNTdW5rKCkpICYmXG4gICAgICAgICAgKHNoaXBzLmJhdHRsZVNoaXAxLmN1cnJlbnRDb3JkcyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBzaGlwcy5iYXR0bGVTaGlwMS5pc1N1bmsoKSkgJiZcbiAgICAgICAgICAoc2hpcHMuY3J1aXNlci5jdXJyZW50Q29yZHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgc2hpcHMuY3J1aXNlci5pc1N1bmsoKSkgJiZcbiAgICAgICAgICAoc2hpcHMuY3J1aXNlcjEuY3VycmVudENvcmRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHNoaXBzLmNydWlzZXIxLmlzU3VuaygpKSAmJlxuICAgICAgICAgIChzaGlwcy5jcnVpc2VyMi5jdXJyZW50Q29yZHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgc2hpcHMuY3J1aXNlcjIuaXNTdW5rKCkpICYmXG4gICAgICAgICAgKHNoaXBzLmRlc3Ryb3llci5jdXJyZW50Q29yZHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgc2hpcHMuZGVzdHJveWVyLmlzU3VuaygpKSAmJlxuICAgICAgICAgIChzaGlwcy5kZXN0cm95ZXIxLmN1cnJlbnRDb3JkcyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBzaGlwcy5kZXN0cm95ZXIxLmlzU3VuaygpKSAmJlxuICAgICAgICAgIChzaGlwcy5kZXN0cm95ZXIyLmN1cnJlbnRDb3JkcyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBzaGlwcy5kZXN0cm95ZXIyLmlzU3VuaygpKSAmJlxuICAgICAgICAgIChzaGlwcy5kZXN0cm95ZXIzLmN1cnJlbnRDb3JkcyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBzaGlwcy5kZXN0cm95ZXIzLmlzU3VuaygpKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFyZUFsbFN1bmsocGxheWVyU2hpcHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICAgIGRlcGxveVNoaXBzLFxuICAgICAgbWlzc2VkQXR0YWNrcyxcbiAgICAgIHN1Y2Nlc3NBdHRhY2tzLFxuICAgICAgY2hlY2tTdW5rLFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHsgU2hpcCwgR2FtZWJvYXJkIH07XG59KSgpO1xuXG5jb25zdCBwbGF5ZXJMb2dpYyA9ICgoKSA9PiB7XG4gIGNvbnN0IFBsYXllciA9IChuYW1lLCBzaGlwc0NvcmRzKSA9PiB7XG4gICAgY29uc3QgcGxheWVyTmFtZSA9IG5hbWU7XG5cbiAgICBjb25zdCBwbGF5ZXJCb2FyZCA9IG1haW5PYmplY3RzLkdhbWVib2FyZCgpO1xuXG4gICAgY29uc3QgcGxheWVyU2hpcHMgPSBwbGF5ZXJCb2FyZC5kZXBsb3lTaGlwcyguLi5zaGlwc0NvcmRzKTtcblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+XG4gICAgICBwbGF5ZXJCb2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzLCBwbGF5ZXJTaGlwcyk7XG5cbiAgICByZXR1cm4geyBwbGF5ZXJOYW1lLCBwbGF5ZXJCb2FyZCwgcGxheWVyU2hpcHMsIHJlY2VpdmVBdHRhY2sgfTtcbiAgfTtcblxuICBjb25zdCBjcHVQbGF5ZXIgPSAoaHVtYW5QbGF5ZXIsIHNoaXBzQ29yZHMpID0+IHtcbiAgICBjb25zdCByaXZhbFBsYXllciA9IGh1bWFuUGxheWVyO1xuXG4gICAgY29uc3QgY3B1Qm9hcmQgPSBtYWluT2JqZWN0cy5HYW1lYm9hcmQoKTtcblxuICAgIGNvbnN0IGNwdVNoaXBzID0gY3B1Qm9hcmQuZGVwbG95U2hpcHMoLi4uc2hpcHNDb3Jkcyk7XG5cbiAgICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvb3JkaW5hdGVzKSA9PlxuICAgICAgY3B1Qm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZGluYXRlcywgY3B1U2hpcHMpO1xuXG4gICAgY29uc3QgdXNlZENvb3JkcyA9IFtdO1xuXG4gICAgY29uc3QgYXR0YWNrUGxheWVyID0gKGNvb3JkcykgPT4ge1xuICAgICAgY29uc3QgcmFuZG9tSW50ID0gKG1heCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcblxuICAgICAgY29uc3QgcmFuZG9tQ29vcmRzID0gW3JhbmRvbUludCg5KSwgcmFuZG9tSW50KDkpXTtcblxuICAgICAgLy8gY2FsbCB0aGUgZnVuY3Rpb24gYWdhaW4gYW5kIGdlbmVyYXRlIG5ldyByYW5kb20gY29vcmRzIGlmIHRoZSBhdHRhY2sgaGFzIGFscmVhZHkgYmUgZG9uZSBpbiB0aGF0IGNvb3JkaW5hdGUuXG4gICAgICBpZiAoaXNUYXJnZXRJbkFycmF5KHVzZWRDb29yZHMsIGNvb3JkcykpIHJldHVybiBhdHRhY2tQbGF5ZXIoKTtcblxuICAgICAgaWYgKGlzVGFyZ2V0SW5BcnJheSh1c2VkQ29vcmRzLCByYW5kb21Db29yZHMpKSByZXR1cm4gYXR0YWNrUGxheWVyKCk7XG5cbiAgICAgIGlmIChjb29yZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBpZiB3ZSBzZXQgbWFudWFsIGVtcHR5IGNvb3JkcyBmb3IgdGVzdGluZyBvciBhbm90aGVyIHB1cnBvc2VzLlxuICAgICAgICB1c2VkQ29vcmRzLnB1c2goY29vcmRzKTtcbiAgICAgICAgcmV0dXJuIHJpdmFsUGxheWVyLnJlY2VpdmVBdHRhY2soY29vcmRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJpdmFsUGxheWVyLnJlY2VpdmVBdHRhY2socmFuZG9tQ29vcmRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHsgYXR0YWNrUGxheWVyLCBjcHVCb2FyZCwgY3B1U2hpcHMsIHJlY2VpdmVBdHRhY2sgfTtcbiAgfTtcblxuICByZXR1cm4geyBQbGF5ZXIsIGNwdVBsYXllciB9O1xufSkoKTtcblxuY29uc3QgR2FtZSA9ICgoKSA9PiB7XG4gIGNvbnN0IG5ld0dhbWUgPSAocGxheWVyTmFtZSwgcGxheWVyQ29vcmRzLCBjcHVDb29yZHMpID0+IHtcbiAgICBjb25zdCBQbGF5ZXIgPSBwbGF5ZXJMb2dpYy5QbGF5ZXIocGxheWVyTmFtZSwgcGxheWVyQ29vcmRzKTtcblxuICAgIGNvbnN0IGNwdVBsYXllciA9IHBsYXllckxvZ2ljLmNwdVBsYXllcihQbGF5ZXIsIGNwdUNvb3Jkcyk7XG5cbiAgICByZXR1cm4geyBQbGF5ZXIsIGNwdVBsYXllciB9O1xuICB9O1xuXG4gIHJldHVybiB7IG5ld0dhbWUgfTtcbn0pKCk7XG5cbmNvbnN0IERPTUxvZ2ljID0gKCgpID0+IHtcbiAgY29uc3QgZGlzcGxheUdyaWQgPSAoZ3JpZDEsIGdyaWQyKSA9PiB7XG4gICAgY29uc3QgY3JlYXRlR3JpZCA9IChzaXplKSA9PiB7XG4gICAgICBjb25zdCByZWN1cnNpdmUgPSAoeVBvcykgPT4ge1xuICAgICAgICBpZiAoeVBvcyA9PT0gc2l6ZSkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZ3JpZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIGdyaWRFbGVtZW50LmNsYXNzTmFtZSA9IGAke3lQb3N9LCR7aX1gO1xuXG4gICAgICAgICAgY29uc3QgZ3JpZEVsZW1lbnQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBncmlkRWxlbWVudDIuY2xhc3NOYW1lID0gYCR7eVBvc30sJHtpfWA7XG5cbiAgICAgICAgICBpZiAoZ3JpZDEgIT09IHVuZGVmaW5lZCAmJiBncmlkMSAhPT0gbnVsbClcbiAgICAgICAgICAgIGdyaWQxLmFwcGVuZENoaWxkKGdyaWRFbGVtZW50KTtcbiAgICAgICAgICBpZiAoZ3JpZDIgIT09IHVuZGVmaW5lZCAmJiBncmlkMiAhPT0gbnVsbClcbiAgICAgICAgICAgIGdyaWQyLmFwcGVuZENoaWxkKGdyaWRFbGVtZW50Mik7XG4gICAgICAgIH1cblxuICAgICAgICByZWN1cnNpdmUoeVBvcyArIDEpO1xuICAgICAgfTtcbiAgICAgIHJlY3Vyc2l2ZSgwKTtcbiAgICB9O1xuXG4gICAgY3JlYXRlR3JpZCgxMCk7XG4gIH07XG5cbiAgY29uc3QgVUlMb2dpYyA9IChub2RlczEsIG5vZGVzMiwgZ2FtZUluZm8pID0+IHtcbiAgICBjb25zdCBwbGF5ZXIxQ29vcmRzID0gZ2FtZUluZm8uUGxheWVyLnBsYXllclNoaXBzLmNvb3JkaW5hdGVzO1xuXG4gICAgY29uc3QgcGxheWVyMkNvb3JkcyA9IGdhbWVJbmZvLmNwdVBsYXllci5jcHVTaGlwcy5jb29yZGluYXRlcztcblxuICAgIGNvbnN0IGF0dGFja1BsYXllciA9IChjb29yZCkgPT4gZ2FtZUluZm8uUGxheWVyLnJlY2VpdmVBdHRhY2soY29vcmQpO1xuXG4gICAgY29uc3QgYXR0YWNrQ3B1ID0gKGNvb3JkKSA9PiBnYW1lSW5mby5jcHVQbGF5ZXIucmVjZWl2ZUF0dGFjayhjb29yZCk7XG5cbiAgICBjb25zdCBhdHRhY2tPbkNsaWNrID0gKHNoaXBDb29yZHMsIG5vZGVDb29yZCwgYXR0YWNrRnVuY3Rpb24pID0+IHtcbiAgICAgIC8vIGlmIHRoZSBwbGF5ZXIgaGFzIGEgc2hpcCBpbiB0aGUgY2xpY2tlZCBjb29yZGluYXRlLCBhdHRhY2sgdGhlIHBsYXllciB0byB0aGF0IHNwZWNpZmljIGNvb3JkLlxuICAgICAgbGV0IHdhc1N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgIGlmIChpc1RhcmdldEluQXJyYXkoT2JqZWN0LnZhbHVlcyhzaGlwQ29vcmRzKSwgbm9kZUNvb3JkKSkge1xuICAgICAgICAvLyB3aGVuIHRoZSBub2RlQ29vcmQgaXMgaW5zaWRlIG9mIGEgb25lLWNvb3JkaW5hdGUgc2hpcCwgdGhpcyBjb25kaXRpb25hbCBpcyB1c2VkLlxuICAgICAgICBhdHRhY2tGdW5jdGlvbihub2RlQ29vcmQpO1xuICAgICAgICB3YXNTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHdhc1N1Y2Nlc3NmdWw7XG4gICAgICB9XG4gICAgICAvLyB3aGVuIHRoZSBub2RlQ29vcmQgaXMgaW5zaWRlIG9mIGEgbXVsdGlwbGUtY29vcmRpbmF0ZSBzaGlwLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwQ29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgY29vcmRzIGFycmF5IG9mIGVhY2ggc2hpcCwgdW50aWwgdGhlIG5vZGVDb29yZCBpcyBmb3VuZC5cbiAgICAgICAgY29uc3QgY3VycmVudENvb3JkcyA9IHNoaXBDb29yZHNbaV07XG4gICAgICAgIGlmIChpc1RhcmdldEluQXJyYXkoY3VycmVudENvb3Jkcywgbm9kZUNvb3JkKSkge1xuICAgICAgICAgIGF0dGFja0Z1bmN0aW9uKG5vZGVDb29yZCk7XG4gICAgICAgICAgd2FzU3VjY2Vzc2Z1bCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7IC8vIHN0b3AgbG9vcGluZyB0aHJvdWdoIHRoZSBzaGlwcyBjb29yZHMgdG8gb3B0aW1pemUgdGltZSBjb21wbGV4aXR5LlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gd2FzU3VjY2Vzc2Z1bDtcbiAgICB9O1xuXG4gICAgY29uc3QgY2xhc3NUb0FycmF5ID0gKGNsYXNzQ29vcmQpID0+IHtcbiAgICAgIGNvbnN0IGFycmF5Q29vcmQgPSBbXTtcblxuICAgICAgY29uc3QgeCA9IGNsYXNzQ29vcmQuc2xpY2UoMCwgMSk7XG5cbiAgICAgIGNvbnN0IHkgPSBjbGFzc0Nvb3JkLnNsaWNlKDIsIDMpO1xuXG4gICAgICBhcnJheUNvb3JkLnB1c2goTnVtYmVyKHgpKTtcbiAgICAgIGFycmF5Q29vcmQucHVzaChOdW1iZXIoeSkpO1xuXG4gICAgICByZXR1cm4gYXJyYXlDb29yZDtcbiAgICB9O1xuXG4gICAgY29uc3QgdmlzdWFsSW5kaWNhdG9ycyA9IChlLCB3YXNTdWNjZXNzZnVsKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHdhc1N1Y2Nlc3NmdWwgPT09IGZhbHNlKSBjdXJyZW50Tm9kZS50ZXh0Q29udGVudCA9IFwi4oCiXCI7XG4gICAgICBlbHNlIHtcbiAgICAgICAgY3VycmVudE5vZGUudGV4dENvbnRlbnQgPSBcIlhcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZGV0ZWN0QXR0YWNrcyA9IChlKSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnRDbGFzcyA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NOYW1lO1xuXG4gICAgICBjb25zdCBub2RlQ2xhc3MgPSBlLnRhcmdldC5jbGFzc05hbWU7XG5cbiAgICAgIGNvbnN0IG5vZGVDb29yZCA9IGNsYXNzVG9BcnJheShub2RlQ2xhc3MpO1xuXG4gICAgICBpZiAocGFyZW50Q2xhc3MgPT09IFwiZ3JpZC0xXCIpIHtcbiAgICAgICAgLy8gaWYgdGhlIGNsaWNrZWQgY29vcmRpbmF0ZSBpcyBpbnNpZGUgb2YgZ3JpZC0xLCB3ZSBrbm93IHRoYXQgaXQgaXMgYW4gYXR0YWNrIHRvIHBsYXllcjEuXG5cbiAgICAgICAgY29uc3QgY2xlYW5Db29yZHMgPSBPYmplY3QudmFsdWVzKHBsYXllcjFDb29yZHMpLmZpbHRlcihcbiAgICAgICAgICAoY29vcmRzKSA9PiBjb29yZHMgIT09IHVuZGVmaW5lZFxuICAgICAgICApOyAvLyBmaWx0ZXIgdW5kZWZpbmVkIGNvb3Jkcy5cbiAgICAgICAgcmV0dXJuIGF0dGFja09uQ2xpY2soY2xlYW5Db29yZHMsIG5vZGVDb29yZCwgYXR0YWNrUGxheWVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudENsYXNzID09PSBcImdyaWQtMlwiKSB7XG4gICAgICAgIGNvbnN0IGNsZWFuQ29vcmRzID0gT2JqZWN0LnZhbHVlcyhwbGF5ZXIyQ29vcmRzKS5maWx0ZXIoXG4gICAgICAgICAgKGNvb3JkcykgPT4gY29vcmRzICE9PSB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGF0dGFja09uQ2xpY2soY2xlYW5Db29yZHMsIG5vZGVDb29yZCwgYXR0YWNrQ3B1KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vZGVzMVtpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGRldGVjdEF0dGFja3MoZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdmlzdWFsSW5kaWNhdG9ycyhlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmlzdWFsSW5kaWNhdG9ycyhlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBub2RlczJbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgIGlmIChkZXRlY3RBdHRhY2tzKGUpID09PSBmYWxzZSkge1xuICAgICAgICAgIHZpc3VhbEluZGljYXRvcnMoZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZpc3VhbEluZGljYXRvcnMoZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzdGFydEdhbWUgPSAoXG4gICAgZ3JpZENvbnRhaW5lcjEsXG4gICAgZ3JpZENvbnRhaW5lcjIsXG4gICAgcGxheWVyQ29vcmRzLFxuICAgIGNwdUNvb3Jkc1xuICApID0+IHtcbiAgICBjb25zdCBjdXJyZW50R2FtZSA9IEdhbWUubmV3R2FtZShcImV4YW1wbGVcIiwgcGxheWVyQ29vcmRzLCBjcHVDb29yZHMpO1xuXG4gICAgaWYgKFxuICAgICAgZ3JpZENvbnRhaW5lcjEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgZ3JpZENvbnRhaW5lcjEgIT09IG51bGwgJiZcbiAgICAgIGdyaWRDb250YWluZXIyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIGdyaWRDb250YWluZXIyICE9PSBudWxsXG4gICAgKSB7XG4gICAgICBVSUxvZ2ljKFxuICAgICAgICBncmlkQ29udGFpbmVyMS5jaGlsZE5vZGVzLFxuICAgICAgICBncmlkQ29udGFpbmVyMi5jaGlsZE5vZGVzLFxuICAgICAgICBjdXJyZW50R2FtZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBjdXJyZW50R2FtZSB9O1xuICB9O1xuXG4gIGNvbnN0IGdlbkRPTUVsZW1lbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvb3JkVG9DbGFzcyA9IChhcnIpID0+IGAke2Fyci5zbGljZSgwLCAxKX0sJHthcnIuc2xpY2UoMSwgMil9YDtcblxuICAgIGNvbnN0IGNoYW5nZUNvb3JkQ29sb3IgPSAoY2xhc3NOYW1lLCBncmlkTnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50Q29vcmQgPVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSlbZ3JpZE51bWJlciAtIDFdO1xuXG4gICAgICBpZiAoY3VycmVudENvb3JkICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGN1cnJlbnRDb29yZC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBncmVlblwiO1xuICAgIH07XG5cbiAgICBjb25zdCBmbGF0Q29vcmRzID0gKGNvb3Jkc0FycikgPT4ge1xuICAgICAgY29uc3Qgb25lRGltZW5zaW9uQ29vcmRzID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IGNvb3Jkc0FycltpXTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvb3Jkc1swXSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICBvbmVEaW1lbnNpb25Db29yZHMucHVzaChcbiAgICAgICAgICAgIC4uLmNvb3Jkc1xuICAgICAgICAgICk7IC8vIGlmIHRoZSBzaGlwcyBoYXZlIG1vcmUgdGhhbiBvbmUgY29vcmRpbmF0ZS5cbiAgICAgICAgZWxzZSBvbmVEaW1lbnNpb25Db29yZHMucHVzaChjb29yZHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25lRGltZW5zaW9uQ29vcmRzO1xuICAgIH07XG5cbiAgICBjb25zdCBzaG93U2hpcHMgPSAoY3VycmVudENvb3JkcywgZ3JpZE51bWJlcikgPT4ge1xuICAgICAgY29uc3QgY29vcmRzID0gZmxhdENvb3JkcyhjdXJyZW50Q29vcmRzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hhbmdlQ29vcmRDb2xvcihjb29yZFRvQ2xhc3MoY29vcmRzW2ldKSwgZ3JpZE51bWJlcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IEV4YW1wbGVDb29yZHMgPSBbXG4gICAgICBbWzAsIDFdLCBbMCwgMl0sIFswLCAzXSwgWzAsIDRdLF0sXG4gICAgICBbWzIsIDFdLCBbMywgMV0sIFs0LCAxXSxdLFxuICAgICAgW1swLCA2XSwgWzAsIDddLCBbMCwgOF0sXSxcbiAgICAgIFtbMywgM10sIFszLCA0XSxdLFxuICAgICAgW1s2LCAzXSwgWzYsIDJdLF0sXG4gICAgICBbWzYsIDhdLCBbNiwgOV0sXSxcbiAgICAgIFs3LCA1XSxcbiAgICAgIFs5LCAyXSxcbiAgICAgIFs5LCA5XSxcbiAgICAgIFs4LCA3XSxcbiAgICBdO1xuXG4gICAgLy8gZGluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGdyaWRzLlxuXG4gICAgY29uc3QgZ3JpZHNDb250YWluZXIgPVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImdyaWRzLWNvbnRhaW5lclwiKVswXTtcblxuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID1cbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzdGFydC1idXR0b25cIilbMF07XG5cblxuICAgIGNvbnN0IGdlblBsYXllckdyaWQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBncmlkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBncmlkMS5jbGFzc05hbWUgPSBcImdyaWQtMVwiO1xuICAgICAgaWYgKGdyaWRzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGdyaWRzQ29udGFpbmVyLmluc2VydEJlZm9yZShncmlkMSwgc3RhcnRCdXR0b24pO1xuICAgICAgRE9NTG9naWMuZGlzcGxheUdyaWQoZ3JpZDEpXG5cbiAgICAgIHNob3dTaGlwcyhFeGFtcGxlQ29vcmRzLCAxKVxuXG4gICAgICByZXR1cm4gZ3JpZDE7XG4gICAgfTtcblxuICAgIGNvbnN0IGdlbkNwdUdyaWQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBncmlkc0NvbnRhaW5lcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiKVxuICAgICAgZ3JpZHNDb250YWluZXIyLmNsYXNzTmFtZSA9IFwiZ3JpZHMtY29udGFpbmVyXCJcblxuICAgICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpXG4gICAgICBtYWluLmFwcGVuZENoaWxkKGdyaWRzQ29udGFpbmVyMilcblxuICAgICAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKVxuICAgICAgbmFtZS50ZXh0Q29udGVudCA9IFwiQ3B1IEdyaWRcIlxuICAgICAgZ3JpZHNDb250YWluZXIyLmFwcGVuZENoaWxkKG5hbWUpXG5cbiAgICAgIGNvbnN0IGdyaWQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGdyaWQyLmNsYXNzTmFtZSA9IFwiZ3JpZC0yXCI7XG5cbiAgICAgIGdyaWRzQ29udGFpbmVyMi5hcHBlbmRDaGlsZChncmlkMik7XG4gICAgICBET01Mb2dpYy5kaXNwbGF5R3JpZChudWxsLCBncmlkMilcblxuICAgICAgcmV0dXJuIGdyaWQyO1xuICAgIH07XG5cbiAgICBjb25zdCBkZWxldGVFbGVtZW50cyA9ICgpID0+IHtcblxuICAgICAgY29uc3QgZ3JpZDEgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZ3JpZC0xXCIpWzBdXG5cbiAgICAgIGdyaWQxLnJlbW92ZSgpXG4gICAgICBzdGFydEJ1dHRvbi5yZW1vdmUoKVxuXG5cbiAgICB9XG5cbiAgICAvLyByZWNlaXZlIGNvb3JkcywgZ3JpZCBjb250YWluZXJzIGFuZCBzdGFydCB0aGUgZ2FtZS5cblxuICAgIGlmIChzdGFydEJ1dHRvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgRE9NTG9naWMuc3RhcnRHYW1lKFxuICAgICAgICAgIGdlblBsYXllckdyaWQoKSxcbiAgICAgICAgICBnZW5DcHVHcmlkKCksXG4gICAgICAgICAgRXhhbXBsZUNvb3JkcyxcbiAgICAgICAgICBFeGFtcGxlQ29vcmRzXG4gICAgICAgICk7XG4gICAgICAgIGRlbGV0ZUVsZW1lbnRzKClcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgZ2VuUGxheWVyR3JpZCwgZ2VuQ3B1R3JpZCB9XG5cbiAgfTtcblxuICByZXR1cm4geyBzdGFydEdhbWUsIGRpc3BsYXlHcmlkLCBnZW5ET01FbGVtZW50cyB9O1xufSkoKTtcblxuY29uc3QgR2FtZUxvb3AgPSAoKCkgPT4ge1xuXG4gIGNvbnN0IHNpbmdsZVBsYXllciA9ICgpID0+IHtcblxuICAgIERPTUxvZ2ljLmdlbkRPTUVsZW1lbnRzKCkuZ2VuUGxheWVyR3JpZCgpXG5cbiAgfVxuXG4gIHJldHVybiB7IHNpbmdsZVBsYXllciB9O1xuXG59KSgpO1xuXG5HYW1lTG9vcC5zaW5nbGVQbGF5ZXIoKTtcblxuZXhwb3J0IHsgbWFpbk9iamVjdHMsIHBsYXllckxvZ2ljLCBHYW1lLCBET01Mb2dpYywgR2FtZUxvb3AgfTtcbiJdLCJuYW1lcyI6WyJpc1RhcmdldEluQXJyYXkiLCJhcnIiLCJ0YXJnZXQiLCJjb250YWlucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwiZWxlbWVudCIsIm1haW5PYmplY3RzIiwiU2hpcCIsImxlbmd0aE51bWJlciIsImhpdHNOdW1iZXIiLCJjb29yZHMiLCJzaGlwSGl0cyIsInNoaXBMZW5ndGgiLCJpc1N1bmsiLCJoaXQiLCJjdXJyZW50SGl0cyIsImN1cnJlbnRDb3JkcyIsIkdhbWVib2FyZCIsIm1pc3NlZEF0dGFja3MiLCJzdWNjZXNzQXR0YWNrcyIsInJlY2VpdmVBdHRhY2siLCJ0YXJnZXRDb3JkcyIsInBsYXllclNoaXBzIiwiY3VycmVudFNoaXBzIiwiT2JqZWN0IiwiZW50cmllcyIsImNvb3JkaW5hdGVzIiwic3VjY2VzcyIsInNoaXBDb3JkcyIsInNoaXBOYW1lIiwicHVzaCIsImNhcnJpZXIiLCJiYXR0bGVTaGlwIiwiYmF0dGxlU2hpcDEiLCJjcnVpc2VyIiwiY3J1aXNlcjEiLCJjcnVpc2VyMiIsImRlc3Ryb3llciIsImRlc3Ryb3llcjEiLCJkZXN0cm95ZXIyIiwiZGVzdHJveWVyMyIsImRlcGxveVNoaXBzIiwiY2FycmllckNvcmRzIiwiYmF0dGxlU2hpcENvcmRzIiwiYmF0dGxlU2hpcDFDb3JkcyIsImNydWlzZXJDb3JkcyIsImNydWlzZXIxQ29yZHMiLCJjcnVpc2VyMkNvcmRzIiwiZGVzdHJveWVyQ29yZHMiLCJkZXN0cm95ZXIxQ29yZHMiLCJkZXN0cm95ZXIyQ29yZHMiLCJkZXN0cm95ZXIzQ29yZHMiLCJjaGVja1N1bmsiLCJzaGlwcyIsInBsYXllckxvZ2ljIiwibmFtZSIsInNoaXBzQ29yZHMiLCJwbGF5ZXJOYW1lIiwicGxheWVyQm9hcmQiLCJodW1hblBsYXllciIsInJpdmFsUGxheWVyIiwiY3B1Qm9hcmQiLCJjcHVTaGlwcyIsInVzZWRDb29yZHMiLCJhdHRhY2tQbGF5ZXIiLCJyYW5kb21JbnQiLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJyYW5kb21Db29yZHMiLCJHYW1lIiwicGxheWVyQ29vcmRzIiwiY3B1Q29vcmRzIiwiUGxheWVyIiwiY3B1UGxheWVyIiwiRE9NTG9naWMiLCJzdGFydEdhbWUiLCJncmlkQ29udGFpbmVyMSIsImdyaWRDb250YWluZXIyIiwiY3VycmVudEdhbWUiLCJub2RlczEiLCJub2RlczIiLCJnYW1lSW5mbyIsInBsYXllcjFDb29yZHMiLCJwbGF5ZXIyQ29vcmRzIiwiY29vcmQiLCJhdHRhY2tDcHUiLCJhdHRhY2tPbkNsaWNrIiwic2hpcENvb3JkcyIsIm5vZGVDb29yZCIsImF0dGFja0Z1bmN0aW9uIiwid2FzU3VjY2Vzc2Z1bCIsInZhbHVlcyIsImN1cnJlbnRDb29yZHMiLCJ2aXN1YWxJbmRpY2F0b3JzIiwiZSIsInRleHRDb250ZW50IiwiZGV0ZWN0QXR0YWNrcyIsInBhcmVudENsYXNzIiwicGFyZW50RWxlbWVudCIsImNsYXNzTmFtZSIsImNsYXNzQ29vcmQiLCJhcnJheUNvb3JkIiwieCIsInNsaWNlIiwieSIsIk51bWJlciIsImNsYXNzVG9BcnJheSIsImNsZWFuQ29vcmRzIiwiZmlsdGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlVJTG9naWMiLCJjaGlsZE5vZGVzIiwiZGlzcGxheUdyaWQiLCJncmlkMSIsImdyaWQyIiwic2l6ZSIsInJlY3Vyc2l2ZSIsInlQb3MiLCJncmlkRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdyaWRFbGVtZW50MiIsImFwcGVuZENoaWxkIiwiY3JlYXRlR3JpZCIsImdlbkRPTUVsZW1lbnRzIiwiY2hhbmdlQ29vcmRDb2xvciIsImdyaWROdW1iZXIiLCJjdXJyZW50Q29vcmQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3R5bGUiLCJib3JkZXIiLCJFeGFtcGxlQ29vcmRzIiwiZ3JpZHNDb250YWluZXIiLCJzdGFydEJ1dHRvbiIsImdlblBsYXllckdyaWQiLCJpbnNlcnRCZWZvcmUiLCJjb29yZHNBcnIiLCJvbmVEaW1lbnNpb25Db29yZHMiLCJmbGF0Q29vcmRzIiwic2hvd1NoaXBzIiwiZ2VuQ3B1R3JpZCIsImdyaWRzQ29udGFpbmVyMiIsInF1ZXJ5U2VsZWN0b3IiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9