(()=>{"use strict";const e=(()=>{const e=e=>`${e.slice(0,1)},${e.slice(1,2)}`,t=(e,t,r)=>{const n=document.getElementsByClassName(e)[t-1];n&&(n.style.border=`1px solid ${r}`)};return{isTargetInArray:(e,t)=>{let r=!1;if(JSON.stringify(e)===JSON.stringify(t)&&(r=!0),!e)return r;if(!t)return r;for(let n=0;n<e.length;n++){const s=e[n];JSON.stringify(s)===JSON.stringify(t)&&(r=!0)}return r},changeCoordColor:t,indicateSunk:(r,n)=>{const{currentCoords:s}=r;if("number"==typeof s[0])t(e(s),n,"red");else for(let r=0;r<s.length;r++)t(e(s[r]),n,"red")},classToArray:e=>{const t=[],r=e.slice(0,1),n=e.slice(2,3);return t.push(Number(r)),t.push(Number(n)),t},coordToClass:e}})(),t=(()=>{const t=(e,t,r)=>{let n=t;const s=e;return{isSunk:()=>s===n,hit:()=>n++,currentHits:()=>n,currentCoords:r,shipLength:s}};return{Ship:t,Gameboard:()=>{const r=[],n=[];return{receiveAttack:(t,s)=>{const o=Object.entries(s.coordinates);r.push(t);for(let r=0;r<o.length;r++){let c=!1;const a=o[r][1],i=o[r][0];if(e.isTargetInArray(a,t)){if(c=!0,n.push(t),"carrier"===i&&(s.carrier.hit(),s.carrier.isSunk()))return s.carrier;if("battleShip"===i&&(s.battleShip.hit(),s.battleShip.isSunk()))return s.battleShip;if("battleShip1"===i&&(s.battleShip1.hit(),s.battleShip1.isSunk()))return s.battleShip1;if("cruiser"===i&&(s.cruiser.hit(),s.cruiser.isSunk()))return s.cruiser;if("cruiser1"===i&&(s.cruiser1.hit(),s.cruiser1.isSunk()))return s.cruiser1;if("cruiser2"===i&&(s.cruiser2.hit(),s.cruiser2.isSunk()))return s.cruiser2;if("destroyer"===i&&(s.destroyer.hit(),s.destroyer.isSunk()))return s.destroyer;if("destroyer1"===i&&(s.destroyer1.hit(),s.destroyer1.isSunk()))return s.destroyer1;if("destroyer2"===i&&(s.destroyer2.hit(),s.destroyer2.isSunk()))return s.destroyer2;if("destroyer3"===i&&(s.destroyer3.hit(),s.destroyer3.isSunk()))return s.destroyer3}if(!0===c)break}},deployShips:(e,r,n,s,o,c,a,i,d,l)=>{const u={carrier:e,battleShip:r,battleShip1:n,cruiser:s,cruiser1:o,cruiser2:c,destroyer:a,destroyer1:i,destroyer2:d,destroyer3:l};return{carrier:t(4,0,u.carrier),battleShip:t(3,0,u.battleShip),battleShip1:t(3,0,u.battleShip1),cruiser:t(2,0,u.cruiser),cruiser1:t(2,0,u.cruiser1),cruiser2:t(2,0,u.cruiser2),destroyer:t(1,0,u.destroyer),destroyer1:t(1,0,u.destroyer1),destroyer2:t(1,0,u.destroyer2),destroyer3:t(1,0,u.destroyer3),coordinates:u}},receivedAttacks:r,successAttacks:n,checkSunk:e=>{return!((t=e).carrier.currentCoords&&!t.carrier.isSunk()||t.battleShip.currentCoords&&!t.battleShip.isSunk()||t.battleShip1.currentCoords&&!t.battleShip1.isSunk()||t.cruiser.currentCoords&&!t.cruiser.isSunk()||t.cruiser1.currentCoords&&!t.cruiser1.isSunk()||t.cruiser2.currentCoords&&!t.cruiser2.isSunk()||t.destroyer.currentCoords&&!t.destroyer.isSunk()||t.destroyer1.currentCoords&&!t.destroyer1.isSunk()||t.destroyer2.currentCoords&&!t.destroyer2.isSunk()||t.destroyer3.currentCoords&&!t.destroyer3.isSunk());var t}}}}})(),r=(()=>{const r=(e,t,r)=>{let n=0;"cpu"===r&&(n=1);const s=document.getElementsByClassName(e)[n];s&&(s.textContent=!1===t?"â€¢":"X")},n=(t,r)=>{let n=0;"cpu"===r&&(n=1);const s=e.coordToClass(t),o=document.getElementsByClassName(s)[n];o&&o.replaceWith(o.cloneNode(!0))},s=e=>{const t=[];for(let n=0;n<e.length;n++)(r=e[n])[0]<0||r[1]<0||r[0]>9||r[1]>9||t.push(e[n]);var r;return t},o=e=>{const t=[],r=[e[0]-1,e[1]],n=[e[0]+1,e[1]],s=[e[0],e[1]+1],o=[e[0],e[1]-1];return t.push(r,n,s,o),t},c=(t,c,a,i,d)=>{const l=[];if("object"==typeof t[0])for(let e=0;e<t.length;e++)l.push(o(t[e]));else l.push(o(t));const u=s(l.flat());for(let t=0;t<u.length;t++)e.isTargetInArray(d,u[t])||(r(u[t],!1,i),n(u[t],i),c(u[t],a))},a=e=>{const t=[],r=[e[0]+1,e[1]+1],n=[e[0]+1,e[1]+-1],s=[e[0]-1,e[1]+1],o=[e[0]-1,e[1]-1];return t.push(r,n,s,o),t},i=(e,t,o)=>{const c=a(e),i=s(c);for(let e=0;e<i.length;e++)r(i[e],!1,o),n(i[e],o),t(i[e],!0)};return{Player:(r,n)=>{const s=r,o=n,a=t.Gameboard(),i=a.deployShips(...n);return{playerName:s,playerCoords:o,playerBoard:a,playerShips:i,receiveAttack:t=>{const r=a.receiveAttack(t,i);r&&(e.indicateSunk(r,1),c(r.currentCoords,a.receiveAttack,i,"player",a.successAttacks))}}},cpuPlayer:(n,s)=>{const o=n,a=s,d=t.Gameboard(),l=d.deployShips(...s),u=[],p=(t,n)=>{const s=e=>Math.floor(Math.random()*e),c=[s(10),s(10)];if(e.isTargetInArray(u,c)&&!0!==n)return p();return(t=>{o.receiveAttack(t),u.push(t);const n=o.playerBoard.successAttacks;return e.isTargetInArray(n,t)?(r(t,!0,"player"),i(t,p,"player"),t):r(t,!1,"player")})(t||c)};return{attackPlayer:p,cpuBoard:d,cpuShips:l,cpuCoords:a,usedCoords:u,receiveAttack:t=>{const r=d.receiveAttack(t,l);r&&(e.indicateSunk(r,2),c(r.currentCoords,d.receiveAttack,l,"cpu",d.successAttacks))}}},visualIndicators:r,attackCorners:i,attackAround:c,returnCorners:a,returnSides:o,validateCoords:s}})(),n=(e,t,n)=>{const s=r.Player(e,t);return{Player:s,cpuPlayer:r.cpuPlayer(s,n)}},s=(()=>{const t=(t,n)=>{const s=n.Player.playerShips.coordinates,o=n.cpuPlayer.cpuShips.coordinates,c=e=>n.Player.receiveAttack(e),a=e=>n.cpuPlayer.receiveAttack(e),i=(t,r,n)=>{let s=!1;if(e.isTargetInArray(Object.values(t),r))return n(r),s=!0,!0;for(let o=0;o<t.length;o++){const c=t[o];if(e.isTargetInArray(c,r)){n(r),s=!0;break}}return s},d=(e,t)=>(t(e),!1),l=t=>{const n=t.target.parentElement.className,l=t.target.className,u=e.classToArray(l);if("grid-1"===n){const e=Object.values(s).filter((e=>void 0!==e));!0===i(e,u,c)?(r.visualIndicators(l,!0,"player"),r.attackCorners(u,c,"player")):(d(u,c),r.visualIndicators(l,!1,"player"))}if("grid-2"===n){const e=Object.values(o).filter((e=>void 0!==e));!0===i(e,u,a)?(r.visualIndicators(l,!0,"cpu"),r.attackCorners(u,a,"cpu")):(d(u,a),r.visualIndicators(l,!1,"cpu"))}};for(let e=0;e<t.length;e++)t[e].addEventListener("click",l,{once:!0})},o=e=>{if(e){const t=e.filter((e=>"object"==typeof e[0])),r=e.filter((e=>"number"==typeof e[0]));return t.flat().concat(r)}},c=e=>{const t=e=>{const t=[...r.returnCorners(e),...r.returnSides(e),e];return r.validateCoords(t)},n=[];if("object"!=typeof e[0]){const r=t(e);return n.push(...r),[...new Set(n.map((e=>JSON.stringify(e))))].map((e=>JSON.parse(e)))}for(let r=0;r<e.length;r++){const s=t(e[r]);n.push(...s)}return[...new Set(n.map((e=>JSON.stringify(e))))].map((e=>JSON.parse(e)))},a=(e,t)=>{let r,n,s=[e.firstCoord];for(let o=0;o<e.coords.length-1;o++){"v"==(t?e.coords[0][0]+1===e.coords[1][0]?"h":"v":e.coords[0][0]+1===e.coords[1][0]?"v":"h")?(r=s[o][0],n=s[o][1]+1):(r=s[o][0]+1,n=s[o][1]);const c=[r,n];s=s.concat([c])}return s},i=(e,t)=>{const r=[...t];return r.splice(e.coordsPosition,1,e.coords),r},d=(t,n)=>{let s=!0;const a=t.coords,{coordsPosition:i}=t,d=[...n];d[i]=[];const l=o(d);if(r.validateCoords(a).length!==a.length)return n;if("number"==typeof a[0])e.isTargetInArray(l,a)&&(s=!1);else for(let t=0;t<a.length;t++)e.isTargetInArray(l,a[t])&&(s=!1);const u=c(a);return!0===s?(d[i]=u,d):n},l=(t,r)=>{let n;for(let s=0;s<t.length;s++)n="number"==typeof t[s]?e.coordToClass(t):e.coordToClass(t[s]),document.getElementsByClassName(n)[0].style.borderColor=r},u=()=>document.getElementsByClassName("select-ships")[0].selectedIndex,p=(e,t)=>{const r=t[e];return((e,t)=>{const r=e;for(let e=0;e<r.length;e++){const t=r[e];l(t,"green")}})(t),l(r,"rgb(37, 214, 199)"),r},m=(e,t,r,n)=>{const s=[Number(e),Number(t)],o=document.getElementsByClassName("grid-wrapper")[0];return n.deleteShownGrid(0),n.genGridOnly(1,o,r),console.log(u()),p(u(),r),l(s,"orange"),s},h=(e,t,r,n,s,o)=>{const c={coords:r[e],firstCoord:t,coordsPosition:e},l=a(c,!0),u={coords:l,firstCoord:l[0],coordsPosition:e},p=(e,t,r,n)=>{if(d(e,t)!==t)return n.deleteElements(0),s(i(e,r),!1,d(e,t),!0)};return"number"==typeof r[e][0]?(c.coords=c.firstCoord,p(c,n,r,o)):p(u,n,r,o),{updateGrid:p}};return{startGame:(e,r,s,o)=>{const c=n("example",s,o);return"shown-grid"!==e.className&&t(e.childNodes,c),"shown-grid"!==r.className&&t(r.childNodes,c),{currentGame:c,gridContainer1:e,gridContainer2:r}},displayGrid:(e,t)=>{(r=>{const n=r=>{if(10!==r){for(let n=0;n<10;n++){const s=document.createElement("div");s.className=`${r},${n}`;const o=document.createElement("div");o.className=`${r},${n}`,e&&e.appendChild(s),t&&t.appendChild(o)}n(r+1)}};n(0)})()},genDOMElements:()=>{const t=(t,r,n)=>{const o=document.createElement("div");return o.className=`grid-${t}`,r.appendChild(o),1===t?s.displayGrid(o,null):s.displayGrid(null,o),n&&(o.className="shown-grid",((t,r)=>{const n=(e=>{const t=[];for(let r=0;r<e.length;r++){const n=e[r];"object"==typeof n[0]?t.push(...n):t.push(n)}return t})(t);for(let t=0;t<n.length;t++)e.changeCoordColor(e.coordToClass(n[t]),r,"green")})(n,t)),o};return{genGrid:(e,r)=>{const n=document.createElement("section");n.className="main-container";const s=document.querySelector("main");s&&s.appendChild(n);const o=document.createElement("div");o.className="grids-container",n&&n.appendChild(o);const c=document.createElement("h3");c.textContent=`Player's ${e} Grid`,o.appendChild(c);const a=document.createElement("div");return a.className="grid-wrapper",((e,t)=>{const r=document.createElement("section"),n=document.createElement("section");r.classList.add("X"),n.classList.add("Y");for(let e=0;e<=9;e++){const t=document.createElement("div");t.textContent=e,n.appendChild(t);const s=document.createElement("div");s.textContent=e,r.appendChild(s)}e.appendChild(r),t.appendChild(n)})(o,a),o.appendChild(a),t(e,a,r)},deleteElements:e=>{const t=document.getElementsByClassName("main-container")[e];t&&t.remove()},genButtons:()=>{(()=>{const e=document.createElement("div");e.classList.add("button-wrapper");const t=document.getElementsByClassName("grids-container")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="random-button",e.textContent="Randomize";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="start-button",e.textContent="Start Game";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})(),(()=>{const e=document.createElement("button");e.className="customize-button",e.textContent="Customize";const t=document.getElementsByClassName("button-wrapper")[0];t&&t.appendChild(e)})()},genCoordInputs:()=>{const e=document.getElementsByClassName("main-container")[0],t=document.createElement("label");t.classList.add("inputs-container"),t.htmlFor="select-ships",t.textContent="Set Initial Coord",e.appendChild(t);const r=document.createElement("select");r.classList.add("select-ships"),t.appendChild(r);const n=document.createElement("div");n.classList.add("input-wrapper"),t.appendChild(n);const s=document.createElement("input");s.classList.add("coords-input"),n.appendChild(s);const o=document.createElement("p");o.classList.add("input-text"),o.textContent=",",n.appendChild(o);const c=document.createElement("input");c.classList.add("coords-input"),n.appendChild(c);const a=document.createElement("button");a.classList.add("apply-coords"),a.textContent="Apply",t.appendChild(a);const i=document.createElement("option");i.value="carrier",i.textContent="Carrier",r.appendChild(i);const d=document.createElement("option");d.value="battleship1",d.textContent="Battleship 1",r.appendChild(d);const l=document.createElement("option");l.value="battleship2",l.textContent="Battleship 2",r.appendChild(l);const u=document.createElement("option");u.value="cruiser1",u.textContent="Cruiser 1",r.appendChild(u);const p=document.createElement("option");p.value="cruiser2",p.textContent="Cruiser 2",r.appendChild(p);const m=document.createElement("option");m.value="cruiser3",m.textContent="Cruiser 3",r.appendChild(m);const h=document.createElement("option");h.value="destroyer1",h.textContent="Destroyer 1",r.appendChild(h);const y=document.createElement("option");y.value="destroyer2",y.textContent="Destroyer 2",r.appendChild(y);const C=document.createElement("option");C.value="destroyer3",C.textContent="Destroyer 3",r.appendChild(C);const g=document.createElement("option");g.value="destroyer4",g.textContent="Destroyer 4",r.appendChild(g)},genGridOnly:t,deleteShownGrid:e=>{const t=document.getElementsByClassName("shown-grid")[e];t&&t.remove()}}},endGame:()=>{const e=document.getElementsByClassName("grid-1")[0],t=document.getElementsByClassName("grid-2")[0];e&&e.replaceWith(e.cloneNode(!0)),t&&t.replaceWith(t.cloneNode(!0))},createModal:(e,t)=>{const r=document.querySelector("body"),n=document.createElement("dialog");n.classList.add("modal"),r.appendChild(n);const s=document.createElement("div");n.appendChild(s),s.textContent=t?`${e} won, try again!`:`Congratulations ${e}, you won!`;const o=document.createElement("button");o.textContent="New Game",o.addEventListener("click",(()=>window.location.reload())),n.appendChild(o),n&&n.showModal()},genCoords:()=>{const t=e=>Math.floor(Math.random()*e),r=(e,r,n)=>{if(n){const t=[n[0]+1,n[1]],r=[n[0],n[1]+1];return"v"===e?t:r}let s;return s="v"===e?[t(10-r),t(10)]:[t(10),t(10-r)],1===r&&(s=[t(10),t(10)]),s},n=(s,c)=>{const a=[],i=0===t(2)?"h":"v",d=o(c),l=()=>{const t=r(i,s);e.isTargetInArray(d,t)?l():a.push(t)};for(let e=0;e<s;e++){const e=a[a.length-1],t=r(i,s,e);e?a.push(t):l()}if(1!==a.length){let t=!0;for(let r=0;r<a.length;r++){const n=a[r];e.isTargetInArray(d,n)&&(t=!1)}return!1===t?n(s,d):a}return a[0]};return{genBattleships:()=>{const e=[],t=n(4,e);e.push(c(t));const r=n(3,e);e.push(c(r));const s=n(3,e);e.push(c(s));const o=n(2,e);e.push(c(o));const a=n(2,e);e.push(c(a));const i=n(2,e);e.push(c(i));const d=n(1,e);e.push(c(d));const l=n(1,e);e.push(c(l));const u=n(1,e);e.push(c(u));const p=n(1,e);return e.push(c(p)),{coords:[t,r,s,o,a,i,d,l,u,p],usedCoords:e}},genShipCoord:n,surroundCoords:c}},rotateShips:(t,r,n,s,c)=>{const l=t.filter((e=>"object"==typeof e[0])),u=o(l),p=n=>{const o=n.target.className,u=((t,r)=>{for(let n=0;n<r.length;n++){const s=r[n],o=[s,n];if(e.isTargetInArray(s,t))return o}})(e.classToArray(o),l),p={coords:u[0],firstCoord:u[0][0],coordsPosition:u[1]};if(p.coords=a(p),d(p,r)!==r){const e=document.getElementsByClassName("inputs-container")[0];return c.deleteElements(0),s(i(p,t),!1,d(p,r),e)}return(t=>{for(let r=0;r<t.length;r++){const n=e.coordToClass(t[r]),s=document.getElementsByClassName(n)[0];s.classList.add("invalid-rotation"),setTimeout((()=>{s.classList.remove("invalid-rotation")}),1e3)}})(u[0])};for(let t=0;t<u.length;t++){const r=e.coordToClass(u[t]),s=document.getElementsByClassName(r)[n];s&&s.addEventListener("click",p)}},rotateCoords:a,changeInitialCoord:h,setupEventListeners:(e,t,r,n,o,c,a)=>{const i=document.getElementsByClassName("start-button")[0],d=document.getElementsByClassName("random-button")[0],y=document.getElementsByClassName("customize-button")[0];d&&d.addEventListener("click",(()=>{((e,t,r)=>{r.deleteElements(0);const n=s.genCoords().genBattleships();t(n.coords,!1,n.usedCoords)})(0,c,n)})),y&&(y.addEventListener("click",(()=>{n.genCoordInputs(),((e,t,r,n)=>{const s=document.getElementsByClassName("apply-coords")[0];s&&s.addEventListener("click",(()=>{const s=document.getElementsByClassName("coords-input"),o=[Number(s[0].value),Number(s[1].value)];h(u(),o,e,t,r,n)}));const o=document.getElementsByClassName("select-ships")[0];l(e[0],"rgb(37, 214, 199)"),o&&o.addEventListener("click",(()=>{const t=document.getElementsByClassName("select-ships")[0].selectedIndex;p(t,e)}));const c=document.getElementsByClassName("coords-input")[0],a=document.getElementsByClassName("coords-input")[1];c.addEventListener("input",(()=>{c.value&&a.value&&m(c.value,a.value,e,n)})),a.addEventListener("input",(()=>{c.value&&a.value&&m(c.value,a.value,e,n)}))})(e,r,c,n)}),{once:!0}),o&&y.click()),i&&i.addEventListener("click",(()=>{a(e,t,n)}))}}})();(()=>{const e=(e,t)=>{const r=e.playerShips,n=t.cpuShips,o=()=>{let o=!1;return t.attackPlayer(),e.playerBoard.checkSunk(r)&&(s.endGame(),s.createModal("Player2",!0),o=!0),t.cpuBoard.checkSunk(n)&&(s.endGame(),s.createModal("Player1"),o=!0),o};return{turnLoop:e=>{for(let t=0;t<e.childNodes.length;t++)e.childNodes[t].addEventListener("click",(()=>{o()}),{once:!0})}}},t=(t,r,n)=>{let o;if(n){if(n.deleteElements(0),!0!==r){const e=s.genCoords().genBattleships().coords;n&&(o=s.startGame(n.genGrid(1,t),n.genGrid(2),t,e))}else o=s.startGame(n.genGrid(1,t),n.genGrid(2),t,t);const c=o.currentGame.Player,a=o.currentGame.cpuPlayer,i=e(c,a),d=o.gridContainer2;return e(c,a).turnLoop(d),{playerObj:c,cpuObj:a,currentTurn:i}}},r=(e,n,o,c)=>{const a=s.genDOMElements();return a.genGrid(1,e),a.genButtons(),s.rotateShips(e,o,0,r,a),s.setupEventListeners(e,n,o,a,c,r,t),{currentDOM:a}};return{singlePlayer:t,setupDOM:()=>{const e=s.genCoords().genBattleships(),t=e.coords,{usedCoords:n}=e;return r(t,!1,n),{usedCoords:n}},genInitialElements:r}})().setupDOM()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,